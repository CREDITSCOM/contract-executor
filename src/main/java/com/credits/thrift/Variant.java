/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.credits.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Variant extends org.apache.thrift.TUnion<Variant, Variant._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Variant");
  private static final org.apache.thrift.protocol.TField V_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("v_bool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField V_I8_FIELD_DESC = new org.apache.thrift.protocol.TField("v_i8", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField V_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("v_i16", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField V_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("v_i32", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField V_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("v_i64", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField V_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("v_double", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField V_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("v_string", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField V_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("v_list", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField I16_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_set", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField I32_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_set", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField I64_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_set", org.apache.thrift.protocol.TType.SET, (short)11);
  private static final org.apache.thrift.protocol.TField STRING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("string_set", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField I16_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_map", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField I32_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_map", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField I64_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_map", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("string_map", org.apache.thrift.protocol.TType.MAP, (short)16);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_BOOL((short)1, "v_bool"),
    V_I8((short)2, "v_i8"),
    V_I16((short)3, "v_i16"),
    V_I32((short)4, "v_i32"),
    V_I64((short)5, "v_i64"),
    V_DOUBLE((short)6, "v_double"),
    V_STRING((short)7, "v_string"),
    V_LIST((short)8, "v_list"),
    I16_SET((short)9, "i16_set"),
    I32_SET((short)10, "i32_set"),
    I64_SET((short)11, "i64_set"),
    STRING_SET((short)12, "string_set"),
    I16_MAP((short)13, "i16_map"),
    I32_MAP((short)14, "i32_map"),
    I64_MAP((short)15, "i64_map"),
    STRING_MAP((short)16, "string_map");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_BOOL
          return V_BOOL;
        case 2: // V_I8
          return V_I8;
        case 3: // V_I16
          return V_I16;
        case 4: // V_I32
          return V_I32;
        case 5: // V_I64
          return V_I64;
        case 6: // V_DOUBLE
          return V_DOUBLE;
        case 7: // V_STRING
          return V_STRING;
        case 8: // V_LIST
          return V_LIST;
        case 9: // I16_SET
          return I16_SET;
        case 10: // I32_SET
          return I32_SET;
        case 11: // I64_SET
          return I64_SET;
        case 12: // STRING_SET
          return STRING_SET;
        case 13: // I16_MAP
          return I16_MAP;
        case 14: // I32_MAP
          return I32_MAP;
        case 15: // I64_MAP
          return I64_MAP;
        case 16: // STRING_MAP
          return STRING_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_BOOL, new org.apache.thrift.meta_data.FieldMetaData("v_bool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.V_I8, new org.apache.thrift.meta_data.FieldMetaData("v_i8", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.V_I16, new org.apache.thrift.meta_data.FieldMetaData("v_i16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.V_I32, new org.apache.thrift.meta_data.FieldMetaData("v_i32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.V_I64, new org.apache.thrift.meta_data.FieldMetaData("v_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("v_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.V_STRING, new org.apache.thrift.meta_data.FieldMetaData("v_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_LIST, new org.apache.thrift.meta_data.FieldMetaData("v_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Variant"))));
    tmpMap.put(_Fields.I16_SET, new org.apache.thrift.meta_data.FieldMetaData("i16_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.I32_SET, new org.apache.thrift.meta_data.FieldMetaData("i32_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.I64_SET, new org.apache.thrift.meta_data.FieldMetaData("i64_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.STRING_SET, new org.apache.thrift.meta_data.FieldMetaData("string_set", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.I16_MAP, new org.apache.thrift.meta_data.FieldMetaData("i16_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Variant"))));
    tmpMap.put(_Fields.I32_MAP, new org.apache.thrift.meta_data.FieldMetaData("i32_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Variant"))));
    tmpMap.put(_Fields.I64_MAP, new org.apache.thrift.meta_data.FieldMetaData("i64_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Variant"))));
    tmpMap.put(_Fields.STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("string_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Variant"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Variant.class, metaDataMap);
  }

  public Variant() {
    super();
  }

  public Variant(_Fields setField, Object value) {
    super(setField, value);
  }

  public Variant(Variant other) {
    super(other);
  }
  public Variant deepCopy() {
    return new Variant(this);
  }

  public static Variant v_bool(boolean value) {
    Variant x = new Variant();
    x.setV_bool(value);
    return x;
  }

  public static Variant v_i8(byte value) {
    Variant x = new Variant();
    x.setV_i8(value);
    return x;
  }

  public static Variant v_i16(short value) {
    Variant x = new Variant();
    x.setV_i16(value);
    return x;
  }

  public static Variant v_i32(int value) {
    Variant x = new Variant();
    x.setV_i32(value);
    return x;
  }

  public static Variant v_i64(long value) {
    Variant x = new Variant();
    x.setV_i64(value);
    return x;
  }

  public static Variant v_double(double value) {
    Variant x = new Variant();
    x.setV_double(value);
    return x;
  }

  public static Variant v_string(String value) {
    Variant x = new Variant();
    x.setV_string(value);
    return x;
  }

  public static Variant v_list(java.util.List<Variant> value) {
    Variant x = new Variant();
    x.setV_list(value);
    return x;
  }

  public static Variant i16_set(java.util.Set<Short> value) {
    Variant x = new Variant();
    x.setI16_set(value);
    return x;
  }

  public static Variant i32_set(java.util.Set<Integer> value) {
    Variant x = new Variant();
    x.setI32_set(value);
    return x;
  }

  public static Variant i64_set(java.util.Set<Long> value) {
    Variant x = new Variant();
    x.setI64_set(value);
    return x;
  }

  public static Variant string_set(java.util.Set<String> value) {
    Variant x = new Variant();
    x.setString_set(value);
    return x;
  }

  public static Variant i16_map(java.util.Map<Short,Variant> value) {
    Variant x = new Variant();
    x.setI16_map(value);
    return x;
  }

  public static Variant i32_map(java.util.Map<Integer,Variant> value) {
    Variant x = new Variant();
    x.setI32_map(value);
    return x;
  }

  public static Variant i64_map(java.util.Map<Long,Variant> value) {
    Variant x = new Variant();
    x.setI64_map(value);
    return x;
  }

  public static Variant string_map(java.util.Map<String,Variant> value) {
    Variant x = new Variant();
    x.setString_map(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case V_BOOL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.Boolean for field 'v_bool', but got " + value.getClass().getSimpleName());
      case V_I8:
        if (value instanceof Byte) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.Byte for field 'v_i8', but got " + value.getClass().getSimpleName());
      case V_I16:
        if (value instanceof Short) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.Short for field 'v_i16', but got " + value.getClass().getSimpleName());
      case V_I32:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.Integer for field 'v_i32', but got " + value.getClass().getSimpleName());
      case V_I64:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.Long for field 'v_i64', but got " + value.getClass().getSimpleName());
      case V_DOUBLE:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.Double for field 'v_double', but got " + value.getClass().getSimpleName());
      case V_STRING:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.lang.String for field 'v_string', but got " + value.getClass().getSimpleName());
      case V_LIST:
        if (value instanceof java.util.List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.List<Variant> for field 'v_list', but got " + value.getClass().getSimpleName());
      case I16_SET:
        if (value instanceof java.util.Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Set<java.lang.Short> for field 'i16_set', but got " + value.getClass().getSimpleName());
      case I32_SET:
        if (value instanceof java.util.Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Set<java.lang.Integer> for field 'i32_set', but got " + value.getClass().getSimpleName());
      case I64_SET:
        if (value instanceof java.util.Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Set<java.lang.Long> for field 'i64_set', but got " + value.getClass().getSimpleName());
      case STRING_SET:
        if (value instanceof java.util.Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Set<java.lang.String> for field 'string_set', but got " + value.getClass().getSimpleName());
      case I16_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Map<java.lang.Short,Variant> for field 'i16_map', but got " + value.getClass().getSimpleName());
      case I32_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Map<java.lang.Integer,Variant> for field 'i32_map', but got " + value.getClass().getSimpleName());
      case I64_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Map<java.lang.Long,Variant> for field 'i64_map', but got " + value.getClass().getSimpleName());
      case STRING_MAP:
        if (value instanceof java.util.Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type java.util.Map<java.lang.String,Variant> for field 'string_map', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case V_BOOL:
          if (field.type == V_BOOL_FIELD_DESC.type) {
            Boolean v_bool;
            v_bool = iprot.readBool();
            return v_bool;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_I8:
          if (field.type == V_I8_FIELD_DESC.type) {
            Byte v_i8;
            v_i8 = iprot.readByte();
            return v_i8;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_I16:
          if (field.type == V_I16_FIELD_DESC.type) {
            Short v_i16;
            v_i16 = iprot.readI16();
            return v_i16;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_I32:
          if (field.type == V_I32_FIELD_DESC.type) {
            Integer v_i32;
            v_i32 = iprot.readI32();
            return v_i32;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_I64:
          if (field.type == V_I64_FIELD_DESC.type) {
            Long v_i64;
            v_i64 = iprot.readI64();
            return v_i64;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_DOUBLE:
          if (field.type == V_DOUBLE_FIELD_DESC.type) {
            Double v_double;
            v_double = iprot.readDouble();
            return v_double;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_STRING:
          if (field.type == V_STRING_FIELD_DESC.type) {
            String v_string;
            v_string = iprot.readString();
            return v_string;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_LIST:
          if (field.type == V_LIST_FIELD_DESC.type) {
            java.util.List<Variant> v_list;
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              v_list = new java.util.ArrayList<Variant>(_list0.size);
              Variant _elem1;
              for (int _i2 = 0; _i2 < _list0.size; ++_i2)
              {
                _elem1 = new Variant();
                _elem1.read(iprot);
                v_list.add(_elem1);
              }
              iprot.readListEnd();
            }
            return v_list;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I16_SET:
          if (field.type == I16_SET_FIELD_DESC.type) {
            java.util.Set<Short> i16_set;
            {
              org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
              i16_set = new java.util.HashSet<Short>(2*_set3.size);
              short _elem4;
              for (int _i5 = 0; _i5 < _set3.size; ++_i5)
              {
                _elem4 = iprot.readI16();
                i16_set.add(_elem4);
              }
              iprot.readSetEnd();
            }
            return i16_set;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_SET:
          if (field.type == I32_SET_FIELD_DESC.type) {
            java.util.Set<Integer> i32_set;
            {
              org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
              i32_set = new java.util.HashSet<Integer>(2*_set6.size);
              int _elem7;
              for (int _i8 = 0; _i8 < _set6.size; ++_i8)
              {
                _elem7 = iprot.readI32();
                i32_set.add(_elem7);
              }
              iprot.readSetEnd();
            }
            return i32_set;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I64_SET:
          if (field.type == I64_SET_FIELD_DESC.type) {
            java.util.Set<Long> i64_set;
            {
              org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
              i64_set = new java.util.HashSet<Long>(2*_set9.size);
              long _elem10;
              for (int _i11 = 0; _i11 < _set9.size; ++_i11)
              {
                _elem10 = iprot.readI64();
                i64_set.add(_elem10);
              }
              iprot.readSetEnd();
            }
            return i64_set;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_SET:
          if (field.type == STRING_SET_FIELD_DESC.type) {
            java.util.Set<String> string_set;
            {
              org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
              string_set = new java.util.HashSet<String>(2*_set12.size);
              String _elem13;
              for (int _i14 = 0; _i14 < _set12.size; ++_i14)
              {
                _elem13 = iprot.readString();
                string_set.add(_elem13);
              }
              iprot.readSetEnd();
            }
            return string_set;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I16_MAP:
          if (field.type == I16_MAP_FIELD_DESC.type) {
            java.util.Map<Short,Variant> i16_map;
            {
              org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
              i16_map = new java.util.HashMap<Short,Variant>(2*_map15.size);
              short _key16;
              Variant _val17;
              for (int _i18 = 0; _i18 < _map15.size; ++_i18)
              {
                _key16 = iprot.readI16();
                _val17 = new Variant();
                _val17.read(iprot);
                i16_map.put(_key16, _val17);
              }
              iprot.readMapEnd();
            }
            return i16_map;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_MAP:
          if (field.type == I32_MAP_FIELD_DESC.type) {
            java.util.Map<Integer,Variant> i32_map;
            {
              org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
              i32_map = new java.util.HashMap<Integer,Variant>(2*_map19.size);
              int _key20;
              Variant _val21;
              for (int _i22 = 0; _i22 < _map19.size; ++_i22)
              {
                _key20 = iprot.readI32();
                _val21 = new Variant();
                _val21.read(iprot);
                i32_map.put(_key20, _val21);
              }
              iprot.readMapEnd();
            }
            return i32_map;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I64_MAP:
          if (field.type == I64_MAP_FIELD_DESC.type) {
            java.util.Map<Long,Variant> i64_map;
            {
              org.apache.thrift.protocol.TMap _map23 = iprot.readMapBegin();
              i64_map = new java.util.HashMap<Long,Variant>(2*_map23.size);
              long _key24;
              Variant _val25;
              for (int _i26 = 0; _i26 < _map23.size; ++_i26)
              {
                _key24 = iprot.readI64();
                _val25 = new Variant();
                _val25.read(iprot);
                i64_map.put(_key24, _val25);
              }
              iprot.readMapEnd();
            }
            return i64_map;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_MAP:
          if (field.type == STRING_MAP_FIELD_DESC.type) {
            java.util.Map<String,Variant> string_map;
            {
              org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
              string_map = new java.util.HashMap<String,Variant>(2*_map27.size);
              String _key28;
              Variant _val29;
              for (int _i30 = 0; _i30 < _map27.size; ++_i30)
              {
                _key28 = iprot.readString();
                _val29 = new Variant();
                _val29.read(iprot);
                string_map.put(_key28, _val29);
              }
              iprot.readMapEnd();
            }
            return string_map;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BOOL:
        Boolean v_bool = (Boolean)value_;
        oprot.writeBool(v_bool);
        return;
      case V_I8:
        Byte v_i8 = (Byte)value_;
        oprot.writeByte(v_i8);
        return;
      case V_I16:
        Short v_i16 = (Short)value_;
        oprot.writeI16(v_i16);
        return;
      case V_I32:
        Integer v_i32 = (Integer)value_;
        oprot.writeI32(v_i32);
        return;
      case V_I64:
        Long v_i64 = (Long)value_;
        oprot.writeI64(v_i64);
        return;
      case V_DOUBLE:
        Double v_double = (Double)value_;
        oprot.writeDouble(v_double);
        return;
      case V_STRING:
        String v_string = (String)value_;
        oprot.writeString(v_string);
        return;
      case V_LIST:
        java.util.List<Variant> v_list = (java.util.List<Variant>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, v_list.size()));
          for (Variant _iter31 : v_list)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case I16_SET:
        java.util.Set<Short> i16_set = (java.util.Set<Short>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, i16_set.size()));
          for (short _iter32 : i16_set)
          {
            oprot.writeI16(_iter32);
          }
          oprot.writeSetEnd();
        }
        return;
      case I32_SET:
        java.util.Set<Integer> i32_set = (java.util.Set<Integer>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, i32_set.size()));
          for (int _iter33 : i32_set)
          {
            oprot.writeI32(_iter33);
          }
          oprot.writeSetEnd();
        }
        return;
      case I64_SET:
        java.util.Set<Long> i64_set = (java.util.Set<Long>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, i64_set.size()));
          for (long _iter34 : i64_set)
          {
            oprot.writeI64(_iter34);
          }
          oprot.writeSetEnd();
        }
        return;
      case STRING_SET:
        java.util.Set<String> string_set = (java.util.Set<String>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, string_set.size()));
          for (String _iter35 : string_set)
          {
            oprot.writeString(_iter35);
          }
          oprot.writeSetEnd();
        }
        return;
      case I16_MAP:
        java.util.Map<Short,Variant> i16_map = (java.util.Map<Short,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRUCT, i16_map.size()));
          for (java.util.Map.Entry<Short, Variant> _iter36 : i16_map.entrySet())
          {
            oprot.writeI16(_iter36.getKey());
            _iter36.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case I32_MAP:
        java.util.Map<Integer,Variant> i32_map = (java.util.Map<Integer,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, i32_map.size()));
          for (java.util.Map.Entry<Integer, Variant> _iter37 : i32_map.entrySet())
          {
            oprot.writeI32(_iter37.getKey());
            _iter37.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case I64_MAP:
        java.util.Map<Long,Variant> i64_map = (java.util.Map<Long,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, i64_map.size()));
          for (java.util.Map.Entry<Long, Variant> _iter38 : i64_map.entrySet())
          {
            oprot.writeI64(_iter38.getKey());
            _iter38.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_MAP:
        java.util.Map<String,Variant> string_map = (java.util.Map<String,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, string_map.size()));
          for (java.util.Map.Entry<String, Variant> _iter39 : string_map.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            _iter39.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case V_BOOL:
          Boolean v_bool;
          v_bool = iprot.readBool();
          return v_bool;
        case V_I8:
          Byte v_i8;
          v_i8 = iprot.readByte();
          return v_i8;
        case V_I16:
          Short v_i16;
          v_i16 = iprot.readI16();
          return v_i16;
        case V_I32:
          Integer v_i32;
          v_i32 = iprot.readI32();
          return v_i32;
        case V_I64:
          Long v_i64;
          v_i64 = iprot.readI64();
          return v_i64;
        case V_DOUBLE:
          Double v_double;
          v_double = iprot.readDouble();
          return v_double;
        case V_STRING:
          String v_string;
          v_string = iprot.readString();
          return v_string;
        case V_LIST:
          java.util.List<Variant> v_list;
          {
            org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
            v_list = new java.util.ArrayList<Variant>(_list40.size);
            Variant _elem41;
            for (int _i42 = 0; _i42 < _list40.size; ++_i42)
            {
              _elem41 = new Variant();
              _elem41.read(iprot);
              v_list.add(_elem41);
            }
            iprot.readListEnd();
          }
          return v_list;
        case I16_SET:
          java.util.Set<Short> i16_set;
          {
            org.apache.thrift.protocol.TSet _set43 = iprot.readSetBegin();
            i16_set = new java.util.HashSet<Short>(2*_set43.size);
            short _elem44;
            for (int _i45 = 0; _i45 < _set43.size; ++_i45)
            {
              _elem44 = iprot.readI16();
              i16_set.add(_elem44);
            }
            iprot.readSetEnd();
          }
          return i16_set;
        case I32_SET:
          java.util.Set<Integer> i32_set;
          {
            org.apache.thrift.protocol.TSet _set46 = iprot.readSetBegin();
            i32_set = new java.util.HashSet<Integer>(2*_set46.size);
            int _elem47;
            for (int _i48 = 0; _i48 < _set46.size; ++_i48)
            {
              _elem47 = iprot.readI32();
              i32_set.add(_elem47);
            }
            iprot.readSetEnd();
          }
          return i32_set;
        case I64_SET:
          java.util.Set<Long> i64_set;
          {
            org.apache.thrift.protocol.TSet _set49 = iprot.readSetBegin();
            i64_set = new java.util.HashSet<Long>(2*_set49.size);
            long _elem50;
            for (int _i51 = 0; _i51 < _set49.size; ++_i51)
            {
              _elem50 = iprot.readI64();
              i64_set.add(_elem50);
            }
            iprot.readSetEnd();
          }
          return i64_set;
        case STRING_SET:
          java.util.Set<String> string_set;
          {
            org.apache.thrift.protocol.TSet _set52 = iprot.readSetBegin();
            string_set = new java.util.HashSet<String>(2*_set52.size);
            String _elem53;
            for (int _i54 = 0; _i54 < _set52.size; ++_i54)
            {
              _elem53 = iprot.readString();
              string_set.add(_elem53);
            }
            iprot.readSetEnd();
          }
          return string_set;
        case I16_MAP:
          java.util.Map<Short,Variant> i16_map;
          {
            org.apache.thrift.protocol.TMap _map55 = iprot.readMapBegin();
            i16_map = new java.util.HashMap<Short,Variant>(2*_map55.size);
            short _key56;
            Variant _val57;
            for (int _i58 = 0; _i58 < _map55.size; ++_i58)
            {
              _key56 = iprot.readI16();
              _val57 = new Variant();
              _val57.read(iprot);
              i16_map.put(_key56, _val57);
            }
            iprot.readMapEnd();
          }
          return i16_map;
        case I32_MAP:
          java.util.Map<Integer,Variant> i32_map;
          {
            org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin();
            i32_map = new java.util.HashMap<Integer,Variant>(2*_map59.size);
            int _key60;
            Variant _val61;
            for (int _i62 = 0; _i62 < _map59.size; ++_i62)
            {
              _key60 = iprot.readI32();
              _val61 = new Variant();
              _val61.read(iprot);
              i32_map.put(_key60, _val61);
            }
            iprot.readMapEnd();
          }
          return i32_map;
        case I64_MAP:
          java.util.Map<Long,Variant> i64_map;
          {
            org.apache.thrift.protocol.TMap _map63 = iprot.readMapBegin();
            i64_map = new java.util.HashMap<Long,Variant>(2*_map63.size);
            long _key64;
            Variant _val65;
            for (int _i66 = 0; _i66 < _map63.size; ++_i66)
            {
              _key64 = iprot.readI64();
              _val65 = new Variant();
              _val65.read(iprot);
              i64_map.put(_key64, _val65);
            }
            iprot.readMapEnd();
          }
          return i64_map;
        case STRING_MAP:
          java.util.Map<String,Variant> string_map;
          {
            org.apache.thrift.protocol.TMap _map67 = iprot.readMapBegin();
            string_map = new java.util.HashMap<String,Variant>(2*_map67.size);
            String _key68;
            Variant _val69;
            for (int _i70 = 0; _i70 < _map67.size; ++_i70)
            {
              _key68 = iprot.readString();
              _val69 = new Variant();
              _val69.read(iprot);
              string_map.put(_key68, _val69);
            }
            iprot.readMapEnd();
          }
          return string_map;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_BOOL:
        Boolean v_bool = (Boolean)value_;
        oprot.writeBool(v_bool);
        return;
      case V_I8:
        Byte v_i8 = (Byte)value_;
        oprot.writeByte(v_i8);
        return;
      case V_I16:
        Short v_i16 = (Short)value_;
        oprot.writeI16(v_i16);
        return;
      case V_I32:
        Integer v_i32 = (Integer)value_;
        oprot.writeI32(v_i32);
        return;
      case V_I64:
        Long v_i64 = (Long)value_;
        oprot.writeI64(v_i64);
        return;
      case V_DOUBLE:
        Double v_double = (Double)value_;
        oprot.writeDouble(v_double);
        return;
      case V_STRING:
        String v_string = (String)value_;
        oprot.writeString(v_string);
        return;
      case V_LIST:
        java.util.List<Variant> v_list = (java.util.List<Variant>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, v_list.size()));
          for (Variant _iter71 : v_list)
          {
            _iter71.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case I16_SET:
        java.util.Set<Short> i16_set = (java.util.Set<Short>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I16, i16_set.size()));
          for (short _iter72 : i16_set)
          {
            oprot.writeI16(_iter72);
          }
          oprot.writeSetEnd();
        }
        return;
      case I32_SET:
        java.util.Set<Integer> i32_set = (java.util.Set<Integer>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, i32_set.size()));
          for (int _iter73 : i32_set)
          {
            oprot.writeI32(_iter73);
          }
          oprot.writeSetEnd();
        }
        return;
      case I64_SET:
        java.util.Set<Long> i64_set = (java.util.Set<Long>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, i64_set.size()));
          for (long _iter74 : i64_set)
          {
            oprot.writeI64(_iter74);
          }
          oprot.writeSetEnd();
        }
        return;
      case STRING_SET:
        java.util.Set<String> string_set = (java.util.Set<String>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, string_set.size()));
          for (String _iter75 : string_set)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeSetEnd();
        }
        return;
      case I16_MAP:
        java.util.Map<Short,Variant> i16_map = (java.util.Map<Short,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.STRUCT, i16_map.size()));
          for (java.util.Map.Entry<Short, Variant> _iter76 : i16_map.entrySet())
          {
            oprot.writeI16(_iter76.getKey());
            _iter76.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case I32_MAP:
        java.util.Map<Integer,Variant> i32_map = (java.util.Map<Integer,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, i32_map.size()));
          for (java.util.Map.Entry<Integer, Variant> _iter77 : i32_map.entrySet())
          {
            oprot.writeI32(_iter77.getKey());
            _iter77.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case I64_MAP:
        java.util.Map<Long,Variant> i64_map = (java.util.Map<Long,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, i64_map.size()));
          for (java.util.Map.Entry<Long, Variant> _iter78 : i64_map.entrySet())
          {
            oprot.writeI64(_iter78.getKey());
            _iter78.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_MAP:
        java.util.Map<String,Variant> string_map = (java.util.Map<String,Variant>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, string_map.size()));
          for (java.util.Map.Entry<String, Variant> _iter79 : string_map.entrySet())
          {
            oprot.writeString(_iter79.getKey());
            _iter79.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case V_BOOL:
        return V_BOOL_FIELD_DESC;
      case V_I8:
        return V_I8_FIELD_DESC;
      case V_I16:
        return V_I16_FIELD_DESC;
      case V_I32:
        return V_I32_FIELD_DESC;
      case V_I64:
        return V_I64_FIELD_DESC;
      case V_DOUBLE:
        return V_DOUBLE_FIELD_DESC;
      case V_STRING:
        return V_STRING_FIELD_DESC;
      case V_LIST:
        return V_LIST_FIELD_DESC;
      case I16_SET:
        return I16_SET_FIELD_DESC;
      case I32_SET:
        return I32_SET_FIELD_DESC;
      case I64_SET:
        return I64_SET_FIELD_DESC;
      case STRING_SET:
        return STRING_SET_FIELD_DESC;
      case I16_MAP:
        return I16_MAP_FIELD_DESC;
      case I32_MAP:
        return I32_MAP_FIELD_DESC;
      case I64_MAP:
        return I64_MAP_FIELD_DESC;
      case STRING_MAP:
        return STRING_MAP_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public boolean getV_bool() {
    if (getSetField() == _Fields.V_BOOL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_bool' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_bool(boolean value) {
    setField_ = _Fields.V_BOOL;
    value_ = value;
  }

  public byte getV_i8() {
    if (getSetField() == _Fields.V_I8) {
      return (Byte)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_i8' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_i8(byte value) {
    setField_ = _Fields.V_I8;
    value_ = value;
  }

  public short getV_i16() {
    if (getSetField() == _Fields.V_I16) {
      return (Short)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_i16' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_i16(short value) {
    setField_ = _Fields.V_I16;
    value_ = value;
  }

  public int getV_i32() {
    if (getSetField() == _Fields.V_I32) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_i32' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_i32(int value) {
    setField_ = _Fields.V_I32;
    value_ = value;
  }

  public long getV_i64() {
    if (getSetField() == _Fields.V_I64) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_i64' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_i64(long value) {
    setField_ = _Fields.V_I64;
    value_ = value;
  }

  public double getV_double() {
    if (getSetField() == _Fields.V_DOUBLE) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_double' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_double(double value) {
    setField_ = _Fields.V_DOUBLE;
    value_ = value;
  }

  public String getV_string() {
    if (getSetField() == _Fields.V_STRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_string' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_string(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_STRING;
    value_ = value;
  }

  public java.util.List<Variant> getV_list() {
    if (getSetField() == _Fields.V_LIST) {
      return (java.util.List<Variant>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_list' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_list(java.util.List<Variant> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_LIST;
    value_ = value;
  }

  public java.util.Set<Short> getI16_set() {
    if (getSetField() == _Fields.I16_SET) {
      return (java.util.Set<Short>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i16_set' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI16_set(java.util.Set<Short> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I16_SET;
    value_ = value;
  }

  public java.util.Set<Integer> getI32_set() {
    if (getSetField() == _Fields.I32_SET) {
      return (java.util.Set<Integer>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32_set' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_set(java.util.Set<Integer> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I32_SET;
    value_ = value;
  }

  public java.util.Set<Long> getI64_set() {
    if (getSetField() == _Fields.I64_SET) {
      return (java.util.Set<Long>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i64_set' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI64_set(java.util.Set<Long> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I64_SET;
    value_ = value;
  }

  public java.util.Set<String> getString_set() {
    if (getSetField() == _Fields.STRING_SET) {
      return (java.util.Set<String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'string_set' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setString_set(java.util.Set<String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_SET;
    value_ = value;
  }

  public java.util.Map<Short,Variant> getI16_map() {
    if (getSetField() == _Fields.I16_MAP) {
      return (java.util.Map<Short,Variant>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i16_map' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI16_map(java.util.Map<Short,Variant> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I16_MAP;
    value_ = value;
  }

  public java.util.Map<Integer,Variant> getI32_map() {
    if (getSetField() == _Fields.I32_MAP) {
      return (java.util.Map<Integer,Variant>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32_map' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_map(java.util.Map<Integer,Variant> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I32_MAP;
    value_ = value;
  }

  public java.util.Map<Long,Variant> getI64_map() {
    if (getSetField() == _Fields.I64_MAP) {
      return (java.util.Map<Long,Variant>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i64_map' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI64_map(java.util.Map<Long,Variant> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.I64_MAP;
    value_ = value;
  }

  public java.util.Map<String,Variant> getString_map() {
    if (getSetField() == _Fields.STRING_MAP) {
      return (java.util.Map<String,Variant>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'string_map' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setString_map(java.util.Map<String,Variant> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_MAP;
    value_ = value;
  }

  public boolean isSetV_bool() {
    return setField_ == _Fields.V_BOOL;
  }


  public boolean isSetV_i8() {
    return setField_ == _Fields.V_I8;
  }


  public boolean isSetV_i16() {
    return setField_ == _Fields.V_I16;
  }


  public boolean isSetV_i32() {
    return setField_ == _Fields.V_I32;
  }


  public boolean isSetV_i64() {
    return setField_ == _Fields.V_I64;
  }


  public boolean isSetV_double() {
    return setField_ == _Fields.V_DOUBLE;
  }


  public boolean isSetV_string() {
    return setField_ == _Fields.V_STRING;
  }


  public boolean isSetV_list() {
    return setField_ == _Fields.V_LIST;
  }


  public boolean isSetI16_set() {
    return setField_ == _Fields.I16_SET;
  }


  public boolean isSetI32_set() {
    return setField_ == _Fields.I32_SET;
  }


  public boolean isSetI64_set() {
    return setField_ == _Fields.I64_SET;
  }


  public boolean isSetString_set() {
    return setField_ == _Fields.STRING_SET;
  }


  public boolean isSetI16_map() {
    return setField_ == _Fields.I16_MAP;
  }


  public boolean isSetI32_map() {
    return setField_ == _Fields.I32_MAP;
  }


  public boolean isSetI64_map() {
    return setField_ == _Fields.I64_MAP;
  }


  public boolean isSetString_map() {
    return setField_ == _Fields.STRING_MAP;
  }


  public boolean equals(Object other) {
    if (other instanceof Variant) {
      return equals((Variant)other);
    } else {
      return false;
    }
  }

  public boolean equals(Variant other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Variant other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<Object> list = new java.util.ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
