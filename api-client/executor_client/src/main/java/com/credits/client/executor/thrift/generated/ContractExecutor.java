/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.credits.client.executor.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-25")
public class ContractExecutor {

  public interface Iface {

    public com.credits.general.thrift.generated.ExecuteByteCodeResult executeByteCode(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<com.credits.general.thrift.generated.Variant> params, long executionTime) throws org.apache.thrift.TException;

    public ExecuteByteCodeMultipleResult executeByteCodeMultiple(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params, long executionTime) throws org.apache.thrift.TException;

    public GetContractMethodsResult getContractMethods(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) throws org.apache.thrift.TException;

    public GetContractVariablesResult getContractVariables(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState) throws org.apache.thrift.TException;

    public CompileSourceCodeResult compileSourceCode(java.lang.String sourceCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void executeByteCode(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<com.credits.general.thrift.generated.Variant> params, long executionTime, org.apache.thrift.async.AsyncMethodCallback<com.credits.general.thrift.generated.ExecuteByteCodeResult> resultHandler) throws org.apache.thrift.TException;

    public void executeByteCodeMultiple(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params, long executionTime, org.apache.thrift.async.AsyncMethodCallback<ExecuteByteCodeMultipleResult> resultHandler) throws org.apache.thrift.TException;

    public void getContractMethods(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, org.apache.thrift.async.AsyncMethodCallback<GetContractMethodsResult> resultHandler) throws org.apache.thrift.TException;

    public void getContractVariables(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, org.apache.thrift.async.AsyncMethodCallback<GetContractVariablesResult> resultHandler) throws org.apache.thrift.TException;

    public void compileSourceCode(java.lang.String sourceCode, org.apache.thrift.async.AsyncMethodCallback<CompileSourceCodeResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.credits.general.thrift.generated.ExecuteByteCodeResult executeByteCode(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<com.credits.general.thrift.generated.Variant> params, long executionTime) throws org.apache.thrift.TException
    {
      send_executeByteCode(initiatorAddress, contractAddress, byteCodeObjects, contractState, method, params, executionTime);
      return recv_executeByteCode();
    }

    public void send_executeByteCode(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<com.credits.general.thrift.generated.Variant> params, long executionTime) throws org.apache.thrift.TException
    {
      executeByteCode_args args = new executeByteCode_args();
      args.setInitiatorAddress(initiatorAddress);
      args.setContractAddress(contractAddress);
      args.setByteCodeObjects(byteCodeObjects);
      args.setContractState(contractState);
      args.setMethod(method);
      args.setParams(params);
      args.setExecutionTime(executionTime);
      sendBase("executeByteCode", args);
    }

    public com.credits.general.thrift.generated.ExecuteByteCodeResult recv_executeByteCode() throws org.apache.thrift.TException
    {
      executeByteCode_result result = new executeByteCode_result();
      receiveBase(result, "executeByteCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeByteCode failed: unknown result");
    }

    public ExecuteByteCodeMultipleResult executeByteCodeMultiple(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params, long executionTime) throws org.apache.thrift.TException
    {
      send_executeByteCodeMultiple(initiatorAddress, contractAddress, byteCodeObjects, contractState, method, params, executionTime);
      return recv_executeByteCodeMultiple();
    }

    public void send_executeByteCodeMultiple(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params, long executionTime) throws org.apache.thrift.TException
    {
      executeByteCodeMultiple_args args = new executeByteCodeMultiple_args();
      args.setInitiatorAddress(initiatorAddress);
      args.setContractAddress(contractAddress);
      args.setByteCodeObjects(byteCodeObjects);
      args.setContractState(contractState);
      args.setMethod(method);
      args.setParams(params);
      args.setExecutionTime(executionTime);
      sendBase("executeByteCodeMultiple", args);
    }

    public ExecuteByteCodeMultipleResult recv_executeByteCodeMultiple() throws org.apache.thrift.TException
    {
      executeByteCodeMultiple_result result = new executeByteCodeMultiple_result();
      receiveBase(result, "executeByteCodeMultiple");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeByteCodeMultiple failed: unknown result");
    }

    public GetContractMethodsResult getContractMethods(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) throws org.apache.thrift.TException
    {
      send_getContractMethods(byteCodeObjects);
      return recv_getContractMethods();
    }

    public void send_getContractMethods(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) throws org.apache.thrift.TException
    {
      getContractMethods_args args = new getContractMethods_args();
      args.setByteCodeObjects(byteCodeObjects);
      sendBase("getContractMethods", args);
    }

    public GetContractMethodsResult recv_getContractMethods() throws org.apache.thrift.TException
    {
      getContractMethods_result result = new getContractMethods_result();
      receiveBase(result, "getContractMethods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getContractMethods failed: unknown result");
    }

    public GetContractVariablesResult getContractVariables(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState) throws org.apache.thrift.TException
    {
      send_getContractVariables(byteCodeObjects, contractState);
      return recv_getContractVariables();
    }

    public void send_getContractVariables(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState) throws org.apache.thrift.TException
    {
      getContractVariables_args args = new getContractVariables_args();
      args.setByteCodeObjects(byteCodeObjects);
      args.setContractState(contractState);
      sendBase("getContractVariables", args);
    }

    public GetContractVariablesResult recv_getContractVariables() throws org.apache.thrift.TException
    {
      getContractVariables_result result = new getContractVariables_result();
      receiveBase(result, "getContractVariables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getContractVariables failed: unknown result");
    }

    public CompileSourceCodeResult compileSourceCode(java.lang.String sourceCode) throws org.apache.thrift.TException
    {
      send_compileSourceCode(sourceCode);
      return recv_compileSourceCode();
    }

    public void send_compileSourceCode(java.lang.String sourceCode) throws org.apache.thrift.TException
    {
      compileSourceCode_args args = new compileSourceCode_args();
      args.setSourceCode(sourceCode);
      sendBase("compileSourceCode", args);
    }

    public CompileSourceCodeResult recv_compileSourceCode() throws org.apache.thrift.TException
    {
      compileSourceCode_result result = new compileSourceCode_result();
      receiveBase(result, "compileSourceCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "compileSourceCode failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void executeByteCode(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<com.credits.general.thrift.generated.Variant> params, long executionTime, org.apache.thrift.async.AsyncMethodCallback<com.credits.general.thrift.generated.ExecuteByteCodeResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeByteCode_call method_call = new executeByteCode_call(initiatorAddress, contractAddress, byteCodeObjects, contractState, method, params, executionTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeByteCode_call extends org.apache.thrift.async.TAsyncMethodCall<com.credits.general.thrift.generated.ExecuteByteCodeResult> {
      private java.nio.ByteBuffer initiatorAddress;
      private java.nio.ByteBuffer contractAddress;
      private java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects;
      private java.nio.ByteBuffer contractState;
      private java.lang.String method;
      private java.util.List<com.credits.general.thrift.generated.Variant> params;
      private long executionTime;
      public executeByteCode_call(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<com.credits.general.thrift.generated.Variant> params, long executionTime, org.apache.thrift.async.AsyncMethodCallback<com.credits.general.thrift.generated.ExecuteByteCodeResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.initiatorAddress = initiatorAddress;
        this.contractAddress = contractAddress;
        this.byteCodeObjects = byteCodeObjects;
        this.contractState = contractState;
        this.method = method;
        this.params = params;
        this.executionTime = executionTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeByteCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeByteCode_args args = new executeByteCode_args();
        args.setInitiatorAddress(initiatorAddress);
        args.setContractAddress(contractAddress);
        args.setByteCodeObjects(byteCodeObjects);
        args.setContractState(contractState);
        args.setMethod(method);
        args.setParams(params);
        args.setExecutionTime(executionTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.credits.general.thrift.generated.ExecuteByteCodeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeByteCode();
      }
    }

    public void executeByteCodeMultiple(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params, long executionTime, org.apache.thrift.async.AsyncMethodCallback<ExecuteByteCodeMultipleResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeByteCodeMultiple_call method_call = new executeByteCodeMultiple_call(initiatorAddress, contractAddress, byteCodeObjects, contractState, method, params, executionTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeByteCodeMultiple_call extends org.apache.thrift.async.TAsyncMethodCall<ExecuteByteCodeMultipleResult> {
      private java.nio.ByteBuffer initiatorAddress;
      private java.nio.ByteBuffer contractAddress;
      private java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects;
      private java.nio.ByteBuffer contractState;
      private java.lang.String method;
      private java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params;
      private long executionTime;
      public executeByteCodeMultiple_call(java.nio.ByteBuffer initiatorAddress, java.nio.ByteBuffer contractAddress, java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, java.lang.String method, java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params, long executionTime, org.apache.thrift.async.AsyncMethodCallback<ExecuteByteCodeMultipleResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.initiatorAddress = initiatorAddress;
        this.contractAddress = contractAddress;
        this.byteCodeObjects = byteCodeObjects;
        this.contractState = contractState;
        this.method = method;
        this.params = params;
        this.executionTime = executionTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeByteCodeMultiple", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeByteCodeMultiple_args args = new executeByteCodeMultiple_args();
        args.setInitiatorAddress(initiatorAddress);
        args.setContractAddress(contractAddress);
        args.setByteCodeObjects(byteCodeObjects);
        args.setContractState(contractState);
        args.setMethod(method);
        args.setParams(params);
        args.setExecutionTime(executionTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecuteByteCodeMultipleResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeByteCodeMultiple();
      }
    }

    public void getContractMethods(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, org.apache.thrift.async.AsyncMethodCallback<GetContractMethodsResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getContractMethods_call method_call = new getContractMethods_call(byteCodeObjects, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getContractMethods_call extends org.apache.thrift.async.TAsyncMethodCall<GetContractMethodsResult> {
      private java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects;
      public getContractMethods_call(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, org.apache.thrift.async.AsyncMethodCallback<GetContractMethodsResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.byteCodeObjects = byteCodeObjects;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getContractMethods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getContractMethods_args args = new getContractMethods_args();
        args.setByteCodeObjects(byteCodeObjects);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetContractMethodsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getContractMethods();
      }
    }

    public void getContractVariables(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, org.apache.thrift.async.AsyncMethodCallback<GetContractVariablesResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getContractVariables_call method_call = new getContractVariables_call(byteCodeObjects, contractState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getContractVariables_call extends org.apache.thrift.async.TAsyncMethodCall<GetContractVariablesResult> {
      private java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects;
      private java.nio.ByteBuffer contractState;
      public getContractVariables_call(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects, java.nio.ByteBuffer contractState, org.apache.thrift.async.AsyncMethodCallback<GetContractVariablesResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.byteCodeObjects = byteCodeObjects;
        this.contractState = contractState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getContractVariables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getContractVariables_args args = new getContractVariables_args();
        args.setByteCodeObjects(byteCodeObjects);
        args.setContractState(contractState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetContractVariablesResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getContractVariables();
      }
    }

    public void compileSourceCode(java.lang.String sourceCode, org.apache.thrift.async.AsyncMethodCallback<CompileSourceCodeResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compileSourceCode_call method_call = new compileSourceCode_call(sourceCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compileSourceCode_call extends org.apache.thrift.async.TAsyncMethodCall<CompileSourceCodeResult> {
      private java.lang.String sourceCode;
      public compileSourceCode_call(java.lang.String sourceCode, org.apache.thrift.async.AsyncMethodCallback<CompileSourceCodeResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceCode = sourceCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compileSourceCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compileSourceCode_args args = new compileSourceCode_args();
        args.setSourceCode(sourceCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompileSourceCodeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compileSourceCode();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("executeByteCode", new executeByteCode());
      processMap.put("executeByteCodeMultiple", new executeByteCodeMultiple());
      processMap.put("getContractMethods", new getContractMethods());
      processMap.put("getContractVariables", new getContractVariables());
      processMap.put("compileSourceCode", new compileSourceCode());
      return processMap;
    }

    public static class executeByteCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeByteCode_args> {
      public executeByteCode() {
        super("executeByteCode");
      }

      public executeByteCode_args getEmptyArgsInstance() {
        return new executeByteCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public executeByteCode_result getResult(I iface, executeByteCode_args args) throws org.apache.thrift.TException {
        executeByteCode_result result = new executeByteCode_result();
        result.success = iface.executeByteCode(args.initiatorAddress, args.contractAddress, args.byteCodeObjects, args.contractState, args.method, args.params, args.executionTime);
        return result;
      }
    }

    public static class executeByteCodeMultiple<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeByteCodeMultiple_args> {
      public executeByteCodeMultiple() {
        super("executeByteCodeMultiple");
      }

      public executeByteCodeMultiple_args getEmptyArgsInstance() {
        return new executeByteCodeMultiple_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public executeByteCodeMultiple_result getResult(I iface, executeByteCodeMultiple_args args) throws org.apache.thrift.TException {
        executeByteCodeMultiple_result result = new executeByteCodeMultiple_result();
        result.success = iface.executeByteCodeMultiple(args.initiatorAddress, args.contractAddress, args.byteCodeObjects, args.contractState, args.method, args.params, args.executionTime);
        return result;
      }
    }

    public static class getContractMethods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getContractMethods_args> {
      public getContractMethods() {
        super("getContractMethods");
      }

      public getContractMethods_args getEmptyArgsInstance() {
        return new getContractMethods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getContractMethods_result getResult(I iface, getContractMethods_args args) throws org.apache.thrift.TException {
        getContractMethods_result result = new getContractMethods_result();
        result.success = iface.getContractMethods(args.byteCodeObjects);
        return result;
      }
    }

    public static class getContractVariables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getContractVariables_args> {
      public getContractVariables() {
        super("getContractVariables");
      }

      public getContractVariables_args getEmptyArgsInstance() {
        return new getContractVariables_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getContractVariables_result getResult(I iface, getContractVariables_args args) throws org.apache.thrift.TException {
        getContractVariables_result result = new getContractVariables_result();
        result.success = iface.getContractVariables(args.byteCodeObjects, args.contractState);
        return result;
      }
    }

    public static class compileSourceCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compileSourceCode_args> {
      public compileSourceCode() {
        super("compileSourceCode");
      }

      public compileSourceCode_args getEmptyArgsInstance() {
        return new compileSourceCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public compileSourceCode_result getResult(I iface, compileSourceCode_args args) throws org.apache.thrift.TException {
        compileSourceCode_result result = new compileSourceCode_result();
        result.success = iface.compileSourceCode(args.sourceCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("executeByteCode", new executeByteCode());
      processMap.put("executeByteCodeMultiple", new executeByteCodeMultiple());
      processMap.put("getContractMethods", new getContractMethods());
      processMap.put("getContractVariables", new getContractVariables());
      processMap.put("compileSourceCode", new compileSourceCode());
      return processMap;
    }

    public static class executeByteCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeByteCode_args, com.credits.general.thrift.generated.ExecuteByteCodeResult> {
      public executeByteCode() {
        super("executeByteCode");
      }

      public executeByteCode_args getEmptyArgsInstance() {
        return new executeByteCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.credits.general.thrift.generated.ExecuteByteCodeResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.credits.general.thrift.generated.ExecuteByteCodeResult>() { 
          public void onComplete(com.credits.general.thrift.generated.ExecuteByteCodeResult o) {
            executeByteCode_result result = new executeByteCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            executeByteCode_result result = new executeByteCode_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeByteCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.credits.general.thrift.generated.ExecuteByteCodeResult> resultHandler) throws org.apache.thrift.TException {
        iface.executeByteCode(args.initiatorAddress, args.contractAddress, args.byteCodeObjects, args.contractState, args.method, args.params, args.executionTime,resultHandler);
      }
    }

    public static class executeByteCodeMultiple<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeByteCodeMultiple_args, ExecuteByteCodeMultipleResult> {
      public executeByteCodeMultiple() {
        super("executeByteCodeMultiple");
      }

      public executeByteCodeMultiple_args getEmptyArgsInstance() {
        return new executeByteCodeMultiple_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ExecuteByteCodeMultipleResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ExecuteByteCodeMultipleResult>() { 
          public void onComplete(ExecuteByteCodeMultipleResult o) {
            executeByteCodeMultiple_result result = new executeByteCodeMultiple_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            executeByteCodeMultiple_result result = new executeByteCodeMultiple_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeByteCodeMultiple_args args, org.apache.thrift.async.AsyncMethodCallback<ExecuteByteCodeMultipleResult> resultHandler) throws org.apache.thrift.TException {
        iface.executeByteCodeMultiple(args.initiatorAddress, args.contractAddress, args.byteCodeObjects, args.contractState, args.method, args.params, args.executionTime,resultHandler);
      }
    }

    public static class getContractMethods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getContractMethods_args, GetContractMethodsResult> {
      public getContractMethods() {
        super("getContractMethods");
      }

      public getContractMethods_args getEmptyArgsInstance() {
        return new getContractMethods_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<GetContractMethodsResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GetContractMethodsResult>() { 
          public void onComplete(GetContractMethodsResult o) {
            getContractMethods_result result = new getContractMethods_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getContractMethods_result result = new getContractMethods_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getContractMethods_args args, org.apache.thrift.async.AsyncMethodCallback<GetContractMethodsResult> resultHandler) throws org.apache.thrift.TException {
        iface.getContractMethods(args.byteCodeObjects,resultHandler);
      }
    }

    public static class getContractVariables<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getContractVariables_args, GetContractVariablesResult> {
      public getContractVariables() {
        super("getContractVariables");
      }

      public getContractVariables_args getEmptyArgsInstance() {
        return new getContractVariables_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<GetContractVariablesResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GetContractVariablesResult>() { 
          public void onComplete(GetContractVariablesResult o) {
            getContractVariables_result result = new getContractVariables_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getContractVariables_result result = new getContractVariables_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getContractVariables_args args, org.apache.thrift.async.AsyncMethodCallback<GetContractVariablesResult> resultHandler) throws org.apache.thrift.TException {
        iface.getContractVariables(args.byteCodeObjects, args.contractState,resultHandler);
      }
    }

    public static class compileSourceCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compileSourceCode_args, CompileSourceCodeResult> {
      public compileSourceCode() {
        super("compileSourceCode");
      }

      public compileSourceCode_args getEmptyArgsInstance() {
        return new compileSourceCode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CompileSourceCodeResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CompileSourceCodeResult>() { 
          public void onComplete(CompileSourceCodeResult o) {
            compileSourceCode_result result = new compileSourceCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            compileSourceCode_result result = new compileSourceCode_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, compileSourceCode_args args, org.apache.thrift.async.AsyncMethodCallback<CompileSourceCodeResult> resultHandler) throws org.apache.thrift.TException {
        iface.compileSourceCode(args.sourceCode,resultHandler);
      }
    }

  }

  public static class executeByteCode_args implements org.apache.thrift.TBase<executeByteCode_args, executeByteCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeByteCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeByteCode_args");

    private static final org.apache.thrift.protocol.TField INITIATOR_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("initiatorAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("contractAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BYTE_CODE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCodeObjects", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField CONTRACT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractState", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField EXECUTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("executionTime", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeByteCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeByteCode_argsTupleSchemeFactory();

    public java.nio.ByteBuffer initiatorAddress; // required
    public java.nio.ByteBuffer contractAddress; // required
    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects; // required
    public java.nio.ByteBuffer contractState; // required
    public java.lang.String method; // required
    public java.util.List<com.credits.general.thrift.generated.Variant> params; // required
    public long executionTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INITIATOR_ADDRESS((short)1, "initiatorAddress"),
      CONTRACT_ADDRESS((short)2, "contractAddress"),
      BYTE_CODE_OBJECTS((short)3, "byteCodeObjects"),
      CONTRACT_STATE((short)4, "contractState"),
      METHOD((short)5, "method"),
      PARAMS((short)6, "params"),
      EXECUTION_TIME((short)7, "executionTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INITIATOR_ADDRESS
            return INITIATOR_ADDRESS;
          case 2: // CONTRACT_ADDRESS
            return CONTRACT_ADDRESS;
          case 3: // BYTE_CODE_OBJECTS
            return BYTE_CODE_OBJECTS;
          case 4: // CONTRACT_STATE
            return CONTRACT_STATE;
          case 5: // METHOD
            return METHOD;
          case 6: // PARAMS
            return PARAMS;
          case 7: // EXECUTION_TIME
            return EXECUTION_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECUTIONTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INITIATOR_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("initiatorAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CONTRACT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("contractAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.BYTE_CODE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("byteCodeObjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.ByteCodeObject.class))));
      tmpMap.put(_Fields.CONTRACT_STATE, new org.apache.thrift.meta_data.FieldMetaData("contractState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.Variant.class))));
      tmpMap.put(_Fields.EXECUTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("executionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeByteCode_args.class, metaDataMap);
    }

    public executeByteCode_args() {
    }

    public executeByteCode_args(
      java.nio.ByteBuffer initiatorAddress,
      java.nio.ByteBuffer contractAddress,
      java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects,
      java.nio.ByteBuffer contractState,
      java.lang.String method,
      java.util.List<com.credits.general.thrift.generated.Variant> params,
      long executionTime)
    {
      this();
      this.initiatorAddress = org.apache.thrift.TBaseHelper.copyBinary(initiatorAddress);
      this.contractAddress = org.apache.thrift.TBaseHelper.copyBinary(contractAddress);
      this.byteCodeObjects = byteCodeObjects;
      this.contractState = org.apache.thrift.TBaseHelper.copyBinary(contractState);
      this.method = method;
      this.params = params;
      this.executionTime = executionTime;
      setExecutionTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeByteCode_args(executeByteCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInitiatorAddress()) {
        this.initiatorAddress = org.apache.thrift.TBaseHelper.copyBinary(other.initiatorAddress);
      }
      if (other.isSetContractAddress()) {
        this.contractAddress = org.apache.thrift.TBaseHelper.copyBinary(other.contractAddress);
      }
      if (other.isSetByteCodeObjects()) {
        java.util.List<com.credits.general.thrift.generated.ByteCodeObject> __this__byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(other.byteCodeObjects.size());
        for (com.credits.general.thrift.generated.ByteCodeObject other_element : other.byteCodeObjects) {
          __this__byteCodeObjects.add(new com.credits.general.thrift.generated.ByteCodeObject(other_element));
        }
        this.byteCodeObjects = __this__byteCodeObjects;
      }
      if (other.isSetContractState()) {
        this.contractState = org.apache.thrift.TBaseHelper.copyBinary(other.contractState);
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetParams()) {
        java.util.List<com.credits.general.thrift.generated.Variant> __this__params = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>(other.params.size());
        for (com.credits.general.thrift.generated.Variant other_element : other.params) {
          __this__params.add(new com.credits.general.thrift.generated.Variant(other_element));
        }
        this.params = __this__params;
      }
      this.executionTime = other.executionTime;
    }

    public executeByteCode_args deepCopy() {
      return new executeByteCode_args(this);
    }

    @Override
    public void clear() {
      this.initiatorAddress = null;
      this.contractAddress = null;
      this.byteCodeObjects = null;
      this.contractState = null;
      this.method = null;
      this.params = null;
      setExecutionTimeIsSet(false);
      this.executionTime = 0;
    }

    public byte[] getInitiatorAddress() {
      setInitiatorAddress(org.apache.thrift.TBaseHelper.rightSize(initiatorAddress));
      return initiatorAddress == null ? null : initiatorAddress.array();
    }

    public java.nio.ByteBuffer bufferForInitiatorAddress() {
      return org.apache.thrift.TBaseHelper.copyBinary(initiatorAddress);
    }

    public executeByteCode_args setInitiatorAddress(byte[] initiatorAddress) {
      this.initiatorAddress = initiatorAddress == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(initiatorAddress.clone());
      return this;
    }

    public executeByteCode_args setInitiatorAddress(java.nio.ByteBuffer initiatorAddress) {
      this.initiatorAddress = org.apache.thrift.TBaseHelper.copyBinary(initiatorAddress);
      return this;
    }

    public void unsetInitiatorAddress() {
      this.initiatorAddress = null;
    }

    /** Returns true if field initiatorAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetInitiatorAddress() {
      return this.initiatorAddress != null;
    }

    public void setInitiatorAddressIsSet(boolean value) {
      if (!value) {
        this.initiatorAddress = null;
      }
    }

    public byte[] getContractAddress() {
      setContractAddress(org.apache.thrift.TBaseHelper.rightSize(contractAddress));
      return contractAddress == null ? null : contractAddress.array();
    }

    public java.nio.ByteBuffer bufferForContractAddress() {
      return org.apache.thrift.TBaseHelper.copyBinary(contractAddress);
    }

    public executeByteCode_args setContractAddress(byte[] contractAddress) {
      this.contractAddress = contractAddress == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(contractAddress.clone());
      return this;
    }

    public executeByteCode_args setContractAddress(java.nio.ByteBuffer contractAddress) {
      this.contractAddress = org.apache.thrift.TBaseHelper.copyBinary(contractAddress);
      return this;
    }

    public void unsetContractAddress() {
      this.contractAddress = null;
    }

    /** Returns true if field contractAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetContractAddress() {
      return this.contractAddress != null;
    }

    public void setContractAddressIsSet(boolean value) {
      if (!value) {
        this.contractAddress = null;
      }
    }

    public int getByteCodeObjectsSize() {
      return (this.byteCodeObjects == null) ? 0 : this.byteCodeObjects.size();
    }

    public java.util.Iterator<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjectsIterator() {
      return (this.byteCodeObjects == null) ? null : this.byteCodeObjects.iterator();
    }

    public void addToByteCodeObjects(com.credits.general.thrift.generated.ByteCodeObject elem) {
      if (this.byteCodeObjects == null) {
        this.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>();
      }
      this.byteCodeObjects.add(elem);
    }

    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjects() {
      return this.byteCodeObjects;
    }

    public executeByteCode_args setByteCodeObjects(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) {
      this.byteCodeObjects = byteCodeObjects;
      return this;
    }

    public void unsetByteCodeObjects() {
      this.byteCodeObjects = null;
    }

    /** Returns true if field byteCodeObjects is set (has been assigned a value) and false otherwise */
    public boolean isSetByteCodeObjects() {
      return this.byteCodeObjects != null;
    }

    public void setByteCodeObjectsIsSet(boolean value) {
      if (!value) {
        this.byteCodeObjects = null;
      }
    }

    public byte[] getContractState() {
      setContractState(org.apache.thrift.TBaseHelper.rightSize(contractState));
      return contractState == null ? null : contractState.array();
    }

    public java.nio.ByteBuffer bufferForContractState() {
      return org.apache.thrift.TBaseHelper.copyBinary(contractState);
    }

    public executeByteCode_args setContractState(byte[] contractState) {
      this.contractState = contractState == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(contractState.clone());
      return this;
    }

    public executeByteCode_args setContractState(java.nio.ByteBuffer contractState) {
      this.contractState = org.apache.thrift.TBaseHelper.copyBinary(contractState);
      return this;
    }

    public void unsetContractState() {
      this.contractState = null;
    }

    /** Returns true if field contractState is set (has been assigned a value) and false otherwise */
    public boolean isSetContractState() {
      return this.contractState != null;
    }

    public void setContractStateIsSet(boolean value) {
      if (!value) {
        this.contractState = null;
      }
    }

    public java.lang.String getMethod() {
      return this.method;
    }

    public executeByteCode_args setMethod(java.lang.String method) {
      this.method = method;
      return this;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public java.util.Iterator<com.credits.general.thrift.generated.Variant> getParamsIterator() {
      return (this.params == null) ? null : this.params.iterator();
    }

    public void addToParams(com.credits.general.thrift.generated.Variant elem) {
      if (this.params == null) {
        this.params = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>();
      }
      this.params.add(elem);
    }

    public java.util.List<com.credits.general.thrift.generated.Variant> getParams() {
      return this.params;
    }

    public executeByteCode_args setParams(java.util.List<com.credits.general.thrift.generated.Variant> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public long getExecutionTime() {
      return this.executionTime;
    }

    public executeByteCode_args setExecutionTime(long executionTime) {
      this.executionTime = executionTime;
      setExecutionTimeIsSet(true);
      return this;
    }

    public void unsetExecutionTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTIONTIME_ISSET_ID);
    }

    /** Returns true if field executionTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutionTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTIONTIME_ISSET_ID);
    }

    public void setExecutionTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTIONTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INITIATOR_ADDRESS:
        if (value == null) {
          unsetInitiatorAddress();
        } else {
          if (value instanceof byte[]) {
            setInitiatorAddress((byte[])value);
          } else {
            setInitiatorAddress((java.nio.ByteBuffer)value);
          }
        }
        break;

      case CONTRACT_ADDRESS:
        if (value == null) {
          unsetContractAddress();
        } else {
          if (value instanceof byte[]) {
            setContractAddress((byte[])value);
          } else {
            setContractAddress((java.nio.ByteBuffer)value);
          }
        }
        break;

      case BYTE_CODE_OBJECTS:
        if (value == null) {
          unsetByteCodeObjects();
        } else {
          setByteCodeObjects((java.util.List<com.credits.general.thrift.generated.ByteCodeObject>)value);
        }
        break;

      case CONTRACT_STATE:
        if (value == null) {
          unsetContractState();
        } else {
          if (value instanceof byte[]) {
            setContractState((byte[])value);
          } else {
            setContractState((java.nio.ByteBuffer)value);
          }
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          setMethod((java.lang.String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((java.util.List<com.credits.general.thrift.generated.Variant>)value);
        }
        break;

      case EXECUTION_TIME:
        if (value == null) {
          unsetExecutionTime();
        } else {
          setExecutionTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INITIATOR_ADDRESS:
        return getInitiatorAddress();

      case CONTRACT_ADDRESS:
        return getContractAddress();

      case BYTE_CODE_OBJECTS:
        return getByteCodeObjects();

      case CONTRACT_STATE:
        return getContractState();

      case METHOD:
        return getMethod();

      case PARAMS:
        return getParams();

      case EXECUTION_TIME:
        return getExecutionTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INITIATOR_ADDRESS:
        return isSetInitiatorAddress();
      case CONTRACT_ADDRESS:
        return isSetContractAddress();
      case BYTE_CODE_OBJECTS:
        return isSetByteCodeObjects();
      case CONTRACT_STATE:
        return isSetContractState();
      case METHOD:
        return isSetMethod();
      case PARAMS:
        return isSetParams();
      case EXECUTION_TIME:
        return isSetExecutionTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeByteCode_args)
        return this.equals((executeByteCode_args)that);
      return false;
    }

    public boolean equals(executeByteCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_initiatorAddress = true && this.isSetInitiatorAddress();
      boolean that_present_initiatorAddress = true && that.isSetInitiatorAddress();
      if (this_present_initiatorAddress || that_present_initiatorAddress) {
        if (!(this_present_initiatorAddress && that_present_initiatorAddress))
          return false;
        if (!this.initiatorAddress.equals(that.initiatorAddress))
          return false;
      }

      boolean this_present_contractAddress = true && this.isSetContractAddress();
      boolean that_present_contractAddress = true && that.isSetContractAddress();
      if (this_present_contractAddress || that_present_contractAddress) {
        if (!(this_present_contractAddress && that_present_contractAddress))
          return false;
        if (!this.contractAddress.equals(that.contractAddress))
          return false;
      }

      boolean this_present_byteCodeObjects = true && this.isSetByteCodeObjects();
      boolean that_present_byteCodeObjects = true && that.isSetByteCodeObjects();
      if (this_present_byteCodeObjects || that_present_byteCodeObjects) {
        if (!(this_present_byteCodeObjects && that_present_byteCodeObjects))
          return false;
        if (!this.byteCodeObjects.equals(that.byteCodeObjects))
          return false;
      }

      boolean this_present_contractState = true && this.isSetContractState();
      boolean that_present_contractState = true && that.isSetContractState();
      if (this_present_contractState || that_present_contractState) {
        if (!(this_present_contractState && that_present_contractState))
          return false;
        if (!this.contractState.equals(that.contractState))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_executionTime = true;
      boolean that_present_executionTime = true;
      if (this_present_executionTime || that_present_executionTime) {
        if (!(this_present_executionTime && that_present_executionTime))
          return false;
        if (this.executionTime != that.executionTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInitiatorAddress()) ? 131071 : 524287);
      if (isSetInitiatorAddress())
        hashCode = hashCode * 8191 + initiatorAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetContractAddress()) ? 131071 : 524287);
      if (isSetContractAddress())
        hashCode = hashCode * 8191 + contractAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetByteCodeObjects()) ? 131071 : 524287);
      if (isSetByteCodeObjects())
        hashCode = hashCode * 8191 + byteCodeObjects.hashCode();

      hashCode = hashCode * 8191 + ((isSetContractState()) ? 131071 : 524287);
      if (isSetContractState())
        hashCode = hashCode * 8191 + contractState.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
      if (isSetMethod())
        hashCode = hashCode * 8191 + method.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(executionTime);

      return hashCode;
    }

    @Override
    public int compareTo(executeByteCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInitiatorAddress()).compareTo(other.isSetInitiatorAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitiatorAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiatorAddress, other.initiatorAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContractAddress()).compareTo(other.isSetContractAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractAddress, other.contractAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetByteCodeObjects()).compareTo(other.isSetByteCodeObjects());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetByteCodeObjects()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCodeObjects, other.byteCodeObjects);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContractState()).compareTo(other.isSetContractState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractState, other.contractState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExecutionTime()).compareTo(other.isSetExecutionTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutionTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionTime, other.executionTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeByteCode_args(");
      boolean first = true;

      sb.append("initiatorAddress:");
      if (this.initiatorAddress == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.initiatorAddress, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractAddress:");
      if (this.contractAddress == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.contractAddress, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("byteCodeObjects:");
      if (this.byteCodeObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.byteCodeObjects);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractState:");
      if (this.contractState == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.contractState, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("executionTime:");
      sb.append(this.executionTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeByteCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCode_argsStandardScheme getScheme() {
        return new executeByteCode_argsStandardScheme();
      }
    }

    private static class executeByteCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeByteCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeByteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INITIATOR_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.initiatorAddress = iprot.readBinary();
                struct.setInitiatorAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractAddress = iprot.readBinary();
                struct.setContractAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BYTE_CODE_OBJECTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list34.size);
                  com.credits.general.thrift.generated.ByteCodeObject _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = new com.credits.general.thrift.generated.ByteCodeObject();
                    _elem35.read(iprot);
                    struct.byteCodeObjects.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setByteCodeObjectsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTRACT_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractState = iprot.readBinary();
                struct.setContractStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                  struct.params = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>(_list37.size);
                  com.credits.general.thrift.generated.Variant _elem38;
                  for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                  {
                    _elem38 = new com.credits.general.thrift.generated.Variant();
                    _elem38.read(iprot);
                    struct.params.add(_elem38);
                  }
                  iprot.readListEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXECUTION_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.executionTime = iprot.readI64();
                struct.setExecutionTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeByteCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.initiatorAddress != null) {
          oprot.writeFieldBegin(INITIATOR_ADDRESS_FIELD_DESC);
          oprot.writeBinary(struct.initiatorAddress);
          oprot.writeFieldEnd();
        }
        if (struct.contractAddress != null) {
          oprot.writeFieldBegin(CONTRACT_ADDRESS_FIELD_DESC);
          oprot.writeBinary(struct.contractAddress);
          oprot.writeFieldEnd();
        }
        if (struct.byteCodeObjects != null) {
          oprot.writeFieldBegin(BYTE_CODE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.byteCodeObjects.size()));
            for (com.credits.general.thrift.generated.ByteCodeObject _iter40 : struct.byteCodeObjects)
            {
              _iter40.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.contractState != null) {
          oprot.writeFieldBegin(CONTRACT_STATE_FIELD_DESC);
          oprot.writeBinary(struct.contractState);
          oprot.writeFieldEnd();
        }
        if (struct.method != null) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.params.size()));
            for (com.credits.general.thrift.generated.Variant _iter41 : struct.params)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXECUTION_TIME_FIELD_DESC);
        oprot.writeI64(struct.executionTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeByteCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCode_argsTupleScheme getScheme() {
        return new executeByteCode_argsTupleScheme();
      }
    }

    private static class executeByteCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeByteCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeByteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInitiatorAddress()) {
          optionals.set(0);
        }
        if (struct.isSetContractAddress()) {
          optionals.set(1);
        }
        if (struct.isSetByteCodeObjects()) {
          optionals.set(2);
        }
        if (struct.isSetContractState()) {
          optionals.set(3);
        }
        if (struct.isSetMethod()) {
          optionals.set(4);
        }
        if (struct.isSetParams()) {
          optionals.set(5);
        }
        if (struct.isSetExecutionTime()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetInitiatorAddress()) {
          oprot.writeBinary(struct.initiatorAddress);
        }
        if (struct.isSetContractAddress()) {
          oprot.writeBinary(struct.contractAddress);
        }
        if (struct.isSetByteCodeObjects()) {
          {
            oprot.writeI32(struct.byteCodeObjects.size());
            for (com.credits.general.thrift.generated.ByteCodeObject _iter42 : struct.byteCodeObjects)
            {
              _iter42.write(oprot);
            }
          }
        }
        if (struct.isSetContractState()) {
          oprot.writeBinary(struct.contractState);
        }
        if (struct.isSetMethod()) {
          oprot.writeString(struct.method);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (com.credits.general.thrift.generated.Variant _iter43 : struct.params)
            {
              _iter43.write(oprot);
            }
          }
        }
        if (struct.isSetExecutionTime()) {
          oprot.writeI64(struct.executionTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeByteCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.initiatorAddress = iprot.readBinary();
          struct.setInitiatorAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contractAddress = iprot.readBinary();
          struct.setContractAddressIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list44.size);
            com.credits.general.thrift.generated.ByteCodeObject _elem45;
            for (int _i46 = 0; _i46 < _list44.size; ++_i46)
            {
              _elem45 = new com.credits.general.thrift.generated.ByteCodeObject();
              _elem45.read(iprot);
              struct.byteCodeObjects.add(_elem45);
            }
          }
          struct.setByteCodeObjectsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.contractState = iprot.readBinary();
          struct.setContractStateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.method = iprot.readString();
          struct.setMethodIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.params = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>(_list47.size);
            com.credits.general.thrift.generated.Variant _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = new com.credits.general.thrift.generated.Variant();
              _elem48.read(iprot);
              struct.params.add(_elem48);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(6)) {
          struct.executionTime = iprot.readI64();
          struct.setExecutionTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeByteCode_result implements org.apache.thrift.TBase<executeByteCode_result, executeByteCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeByteCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeByteCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeByteCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeByteCode_resultTupleSchemeFactory();

    public com.credits.general.thrift.generated.ExecuteByteCodeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.ExecuteByteCodeResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeByteCode_result.class, metaDataMap);
    }

    public executeByteCode_result() {
    }

    public executeByteCode_result(
      com.credits.general.thrift.generated.ExecuteByteCodeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeByteCode_result(executeByteCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.credits.general.thrift.generated.ExecuteByteCodeResult(other.success);
      }
    }

    public executeByteCode_result deepCopy() {
      return new executeByteCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.credits.general.thrift.generated.ExecuteByteCodeResult getSuccess() {
      return this.success;
    }

    public executeByteCode_result setSuccess(com.credits.general.thrift.generated.ExecuteByteCodeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.credits.general.thrift.generated.ExecuteByteCodeResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeByteCode_result)
        return this.equals((executeByteCode_result)that);
      return false;
    }

    public boolean equals(executeByteCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeByteCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeByteCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeByteCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCode_resultStandardScheme getScheme() {
        return new executeByteCode_resultStandardScheme();
      }
    }

    private static class executeByteCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeByteCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeByteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.credits.general.thrift.generated.ExecuteByteCodeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeByteCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeByteCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCode_resultTupleScheme getScheme() {
        return new executeByteCode_resultTupleScheme();
      }
    }

    private static class executeByteCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeByteCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeByteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeByteCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.credits.general.thrift.generated.ExecuteByteCodeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeByteCodeMultiple_args implements org.apache.thrift.TBase<executeByteCodeMultiple_args, executeByteCodeMultiple_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeByteCodeMultiple_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeByteCodeMultiple_args");

    private static final org.apache.thrift.protocol.TField INITIATOR_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("initiatorAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("contractAddress", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BYTE_CODE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCodeObjects", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField CONTRACT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractState", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField EXECUTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("executionTime", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeByteCodeMultiple_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeByteCodeMultiple_argsTupleSchemeFactory();

    public java.nio.ByteBuffer initiatorAddress; // required
    public java.nio.ByteBuffer contractAddress; // required
    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects; // required
    public java.nio.ByteBuffer contractState; // required
    public java.lang.String method; // required
    public java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params; // required
    public long executionTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INITIATOR_ADDRESS((short)1, "initiatorAddress"),
      CONTRACT_ADDRESS((short)2, "contractAddress"),
      BYTE_CODE_OBJECTS((short)3, "byteCodeObjects"),
      CONTRACT_STATE((short)4, "contractState"),
      METHOD((short)5, "method"),
      PARAMS((short)6, "params"),
      EXECUTION_TIME((short)7, "executionTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INITIATOR_ADDRESS
            return INITIATOR_ADDRESS;
          case 2: // CONTRACT_ADDRESS
            return CONTRACT_ADDRESS;
          case 3: // BYTE_CODE_OBJECTS
            return BYTE_CODE_OBJECTS;
          case 4: // CONTRACT_STATE
            return CONTRACT_STATE;
          case 5: // METHOD
            return METHOD;
          case 6: // PARAMS
            return PARAMS;
          case 7: // EXECUTION_TIME
            return EXECUTION_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXECUTIONTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INITIATOR_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("initiatorAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CONTRACT_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("contractAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.BYTE_CODE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("byteCodeObjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.ByteCodeObject.class))));
      tmpMap.put(_Fields.CONTRACT_STATE, new org.apache.thrift.meta_data.FieldMetaData("contractState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.Variant.class)))));
      tmpMap.put(_Fields.EXECUTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("executionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeByteCodeMultiple_args.class, metaDataMap);
    }

    public executeByteCodeMultiple_args() {
    }

    public executeByteCodeMultiple_args(
      java.nio.ByteBuffer initiatorAddress,
      java.nio.ByteBuffer contractAddress,
      java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects,
      java.nio.ByteBuffer contractState,
      java.lang.String method,
      java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params,
      long executionTime)
    {
      this();
      this.initiatorAddress = org.apache.thrift.TBaseHelper.copyBinary(initiatorAddress);
      this.contractAddress = org.apache.thrift.TBaseHelper.copyBinary(contractAddress);
      this.byteCodeObjects = byteCodeObjects;
      this.contractState = org.apache.thrift.TBaseHelper.copyBinary(contractState);
      this.method = method;
      this.params = params;
      this.executionTime = executionTime;
      setExecutionTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeByteCodeMultiple_args(executeByteCodeMultiple_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInitiatorAddress()) {
        this.initiatorAddress = org.apache.thrift.TBaseHelper.copyBinary(other.initiatorAddress);
      }
      if (other.isSetContractAddress()) {
        this.contractAddress = org.apache.thrift.TBaseHelper.copyBinary(other.contractAddress);
      }
      if (other.isSetByteCodeObjects()) {
        java.util.List<com.credits.general.thrift.generated.ByteCodeObject> __this__byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(other.byteCodeObjects.size());
        for (com.credits.general.thrift.generated.ByteCodeObject other_element : other.byteCodeObjects) {
          __this__byteCodeObjects.add(new com.credits.general.thrift.generated.ByteCodeObject(other_element));
        }
        this.byteCodeObjects = __this__byteCodeObjects;
      }
      if (other.isSetContractState()) {
        this.contractState = org.apache.thrift.TBaseHelper.copyBinary(other.contractState);
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetParams()) {
        java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> __this__params = new java.util.ArrayList<java.util.List<com.credits.general.thrift.generated.Variant>>(other.params.size());
        for (java.util.List<com.credits.general.thrift.generated.Variant> other_element : other.params) {
          java.util.List<com.credits.general.thrift.generated.Variant> __this__params_copy = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>(other_element.size());
          for (com.credits.general.thrift.generated.Variant other_element_element : other_element) {
            __this__params_copy.add(new com.credits.general.thrift.generated.Variant(other_element_element));
          }
          __this__params.add(__this__params_copy);
        }
        this.params = __this__params;
      }
      this.executionTime = other.executionTime;
    }

    public executeByteCodeMultiple_args deepCopy() {
      return new executeByteCodeMultiple_args(this);
    }

    @Override
    public void clear() {
      this.initiatorAddress = null;
      this.contractAddress = null;
      this.byteCodeObjects = null;
      this.contractState = null;
      this.method = null;
      this.params = null;
      setExecutionTimeIsSet(false);
      this.executionTime = 0;
    }

    public byte[] getInitiatorAddress() {
      setInitiatorAddress(org.apache.thrift.TBaseHelper.rightSize(initiatorAddress));
      return initiatorAddress == null ? null : initiatorAddress.array();
    }

    public java.nio.ByteBuffer bufferForInitiatorAddress() {
      return org.apache.thrift.TBaseHelper.copyBinary(initiatorAddress);
    }

    public executeByteCodeMultiple_args setInitiatorAddress(byte[] initiatorAddress) {
      this.initiatorAddress = initiatorAddress == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(initiatorAddress.clone());
      return this;
    }

    public executeByteCodeMultiple_args setInitiatorAddress(java.nio.ByteBuffer initiatorAddress) {
      this.initiatorAddress = org.apache.thrift.TBaseHelper.copyBinary(initiatorAddress);
      return this;
    }

    public void unsetInitiatorAddress() {
      this.initiatorAddress = null;
    }

    /** Returns true if field initiatorAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetInitiatorAddress() {
      return this.initiatorAddress != null;
    }

    public void setInitiatorAddressIsSet(boolean value) {
      if (!value) {
        this.initiatorAddress = null;
      }
    }

    public byte[] getContractAddress() {
      setContractAddress(org.apache.thrift.TBaseHelper.rightSize(contractAddress));
      return contractAddress == null ? null : contractAddress.array();
    }

    public java.nio.ByteBuffer bufferForContractAddress() {
      return org.apache.thrift.TBaseHelper.copyBinary(contractAddress);
    }

    public executeByteCodeMultiple_args setContractAddress(byte[] contractAddress) {
      this.contractAddress = contractAddress == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(contractAddress.clone());
      return this;
    }

    public executeByteCodeMultiple_args setContractAddress(java.nio.ByteBuffer contractAddress) {
      this.contractAddress = org.apache.thrift.TBaseHelper.copyBinary(contractAddress);
      return this;
    }

    public void unsetContractAddress() {
      this.contractAddress = null;
    }

    /** Returns true if field contractAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetContractAddress() {
      return this.contractAddress != null;
    }

    public void setContractAddressIsSet(boolean value) {
      if (!value) {
        this.contractAddress = null;
      }
    }

    public int getByteCodeObjectsSize() {
      return (this.byteCodeObjects == null) ? 0 : this.byteCodeObjects.size();
    }

    public java.util.Iterator<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjectsIterator() {
      return (this.byteCodeObjects == null) ? null : this.byteCodeObjects.iterator();
    }

    public void addToByteCodeObjects(com.credits.general.thrift.generated.ByteCodeObject elem) {
      if (this.byteCodeObjects == null) {
        this.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>();
      }
      this.byteCodeObjects.add(elem);
    }

    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjects() {
      return this.byteCodeObjects;
    }

    public executeByteCodeMultiple_args setByteCodeObjects(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) {
      this.byteCodeObjects = byteCodeObjects;
      return this;
    }

    public void unsetByteCodeObjects() {
      this.byteCodeObjects = null;
    }

    /** Returns true if field byteCodeObjects is set (has been assigned a value) and false otherwise */
    public boolean isSetByteCodeObjects() {
      return this.byteCodeObjects != null;
    }

    public void setByteCodeObjectsIsSet(boolean value) {
      if (!value) {
        this.byteCodeObjects = null;
      }
    }

    public byte[] getContractState() {
      setContractState(org.apache.thrift.TBaseHelper.rightSize(contractState));
      return contractState == null ? null : contractState.array();
    }

    public java.nio.ByteBuffer bufferForContractState() {
      return org.apache.thrift.TBaseHelper.copyBinary(contractState);
    }

    public executeByteCodeMultiple_args setContractState(byte[] contractState) {
      this.contractState = contractState == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(contractState.clone());
      return this;
    }

    public executeByteCodeMultiple_args setContractState(java.nio.ByteBuffer contractState) {
      this.contractState = org.apache.thrift.TBaseHelper.copyBinary(contractState);
      return this;
    }

    public void unsetContractState() {
      this.contractState = null;
    }

    /** Returns true if field contractState is set (has been assigned a value) and false otherwise */
    public boolean isSetContractState() {
      return this.contractState != null;
    }

    public void setContractStateIsSet(boolean value) {
      if (!value) {
        this.contractState = null;
      }
    }

    public java.lang.String getMethod() {
      return this.method;
    }

    public executeByteCodeMultiple_args setMethod(java.lang.String method) {
      this.method = method;
      return this;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public java.util.Iterator<java.util.List<com.credits.general.thrift.generated.Variant>> getParamsIterator() {
      return (this.params == null) ? null : this.params.iterator();
    }

    public void addToParams(java.util.List<com.credits.general.thrift.generated.Variant> elem) {
      if (this.params == null) {
        this.params = new java.util.ArrayList<java.util.List<com.credits.general.thrift.generated.Variant>>();
      }
      this.params.add(elem);
    }

    public java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> getParams() {
      return this.params;
    }

    public executeByteCodeMultiple_args setParams(java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public long getExecutionTime() {
      return this.executionTime;
    }

    public executeByteCodeMultiple_args setExecutionTime(long executionTime) {
      this.executionTime = executionTime;
      setExecutionTimeIsSet(true);
      return this;
    }

    public void unsetExecutionTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECUTIONTIME_ISSET_ID);
    }

    /** Returns true if field executionTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExecutionTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECUTIONTIME_ISSET_ID);
    }

    public void setExecutionTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECUTIONTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INITIATOR_ADDRESS:
        if (value == null) {
          unsetInitiatorAddress();
        } else {
          if (value instanceof byte[]) {
            setInitiatorAddress((byte[])value);
          } else {
            setInitiatorAddress((java.nio.ByteBuffer)value);
          }
        }
        break;

      case CONTRACT_ADDRESS:
        if (value == null) {
          unsetContractAddress();
        } else {
          if (value instanceof byte[]) {
            setContractAddress((byte[])value);
          } else {
            setContractAddress((java.nio.ByteBuffer)value);
          }
        }
        break;

      case BYTE_CODE_OBJECTS:
        if (value == null) {
          unsetByteCodeObjects();
        } else {
          setByteCodeObjects((java.util.List<com.credits.general.thrift.generated.ByteCodeObject>)value);
        }
        break;

      case CONTRACT_STATE:
        if (value == null) {
          unsetContractState();
        } else {
          if (value instanceof byte[]) {
            setContractState((byte[])value);
          } else {
            setContractState((java.nio.ByteBuffer)value);
          }
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          setMethod((java.lang.String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((java.util.List<java.util.List<com.credits.general.thrift.generated.Variant>>)value);
        }
        break;

      case EXECUTION_TIME:
        if (value == null) {
          unsetExecutionTime();
        } else {
          setExecutionTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INITIATOR_ADDRESS:
        return getInitiatorAddress();

      case CONTRACT_ADDRESS:
        return getContractAddress();

      case BYTE_CODE_OBJECTS:
        return getByteCodeObjects();

      case CONTRACT_STATE:
        return getContractState();

      case METHOD:
        return getMethod();

      case PARAMS:
        return getParams();

      case EXECUTION_TIME:
        return getExecutionTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INITIATOR_ADDRESS:
        return isSetInitiatorAddress();
      case CONTRACT_ADDRESS:
        return isSetContractAddress();
      case BYTE_CODE_OBJECTS:
        return isSetByteCodeObjects();
      case CONTRACT_STATE:
        return isSetContractState();
      case METHOD:
        return isSetMethod();
      case PARAMS:
        return isSetParams();
      case EXECUTION_TIME:
        return isSetExecutionTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeByteCodeMultiple_args)
        return this.equals((executeByteCodeMultiple_args)that);
      return false;
    }

    public boolean equals(executeByteCodeMultiple_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_initiatorAddress = true && this.isSetInitiatorAddress();
      boolean that_present_initiatorAddress = true && that.isSetInitiatorAddress();
      if (this_present_initiatorAddress || that_present_initiatorAddress) {
        if (!(this_present_initiatorAddress && that_present_initiatorAddress))
          return false;
        if (!this.initiatorAddress.equals(that.initiatorAddress))
          return false;
      }

      boolean this_present_contractAddress = true && this.isSetContractAddress();
      boolean that_present_contractAddress = true && that.isSetContractAddress();
      if (this_present_contractAddress || that_present_contractAddress) {
        if (!(this_present_contractAddress && that_present_contractAddress))
          return false;
        if (!this.contractAddress.equals(that.contractAddress))
          return false;
      }

      boolean this_present_byteCodeObjects = true && this.isSetByteCodeObjects();
      boolean that_present_byteCodeObjects = true && that.isSetByteCodeObjects();
      if (this_present_byteCodeObjects || that_present_byteCodeObjects) {
        if (!(this_present_byteCodeObjects && that_present_byteCodeObjects))
          return false;
        if (!this.byteCodeObjects.equals(that.byteCodeObjects))
          return false;
      }

      boolean this_present_contractState = true && this.isSetContractState();
      boolean that_present_contractState = true && that.isSetContractState();
      if (this_present_contractState || that_present_contractState) {
        if (!(this_present_contractState && that_present_contractState))
          return false;
        if (!this.contractState.equals(that.contractState))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      boolean this_present_executionTime = true;
      boolean that_present_executionTime = true;
      if (this_present_executionTime || that_present_executionTime) {
        if (!(this_present_executionTime && that_present_executionTime))
          return false;
        if (this.executionTime != that.executionTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInitiatorAddress()) ? 131071 : 524287);
      if (isSetInitiatorAddress())
        hashCode = hashCode * 8191 + initiatorAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetContractAddress()) ? 131071 : 524287);
      if (isSetContractAddress())
        hashCode = hashCode * 8191 + contractAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetByteCodeObjects()) ? 131071 : 524287);
      if (isSetByteCodeObjects())
        hashCode = hashCode * 8191 + byteCodeObjects.hashCode();

      hashCode = hashCode * 8191 + ((isSetContractState()) ? 131071 : 524287);
      if (isSetContractState())
        hashCode = hashCode * 8191 + contractState.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
      if (isSetMethod())
        hashCode = hashCode * 8191 + method.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(executionTime);

      return hashCode;
    }

    @Override
    public int compareTo(executeByteCodeMultiple_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInitiatorAddress()).compareTo(other.isSetInitiatorAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitiatorAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiatorAddress, other.initiatorAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContractAddress()).compareTo(other.isSetContractAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractAddress, other.contractAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetByteCodeObjects()).compareTo(other.isSetByteCodeObjects());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetByteCodeObjects()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCodeObjects, other.byteCodeObjects);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContractState()).compareTo(other.isSetContractState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractState, other.contractState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExecutionTime()).compareTo(other.isSetExecutionTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecutionTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionTime, other.executionTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeByteCodeMultiple_args(");
      boolean first = true;

      sb.append("initiatorAddress:");
      if (this.initiatorAddress == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.initiatorAddress, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractAddress:");
      if (this.contractAddress == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.contractAddress, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("byteCodeObjects:");
      if (this.byteCodeObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.byteCodeObjects);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractState:");
      if (this.contractState == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.contractState, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("executionTime:");
      sb.append(this.executionTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeByteCodeMultiple_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCodeMultiple_argsStandardScheme getScheme() {
        return new executeByteCodeMultiple_argsStandardScheme();
      }
    }

    private static class executeByteCodeMultiple_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeByteCodeMultiple_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeByteCodeMultiple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INITIATOR_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.initiatorAddress = iprot.readBinary();
                struct.setInitiatorAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractAddress = iprot.readBinary();
                struct.setContractAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BYTE_CODE_OBJECTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list50.size);
                  com.credits.general.thrift.generated.ByteCodeObject _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = new com.credits.general.thrift.generated.ByteCodeObject();
                    _elem51.read(iprot);
                    struct.byteCodeObjects.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setByteCodeObjectsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTRACT_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractState = iprot.readBinary();
                struct.setContractStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list53 = iprot.readListBegin();
                  struct.params = new java.util.ArrayList<java.util.List<com.credits.general.thrift.generated.Variant>>(_list53.size);
                  java.util.List<com.credits.general.thrift.generated.Variant> _elem54;
                  for (int _i55 = 0; _i55 < _list53.size; ++_i55)
                  {
                    {
                      org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                      _elem54 = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>(_list56.size);
                      com.credits.general.thrift.generated.Variant _elem57;
                      for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                      {
                        _elem57 = new com.credits.general.thrift.generated.Variant();
                        _elem57.read(iprot);
                        _elem54.add(_elem57);
                      }
                      iprot.readListEnd();
                    }
                    struct.params.add(_elem54);
                  }
                  iprot.readListEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // EXECUTION_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.executionTime = iprot.readI64();
                struct.setExecutionTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeByteCodeMultiple_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.initiatorAddress != null) {
          oprot.writeFieldBegin(INITIATOR_ADDRESS_FIELD_DESC);
          oprot.writeBinary(struct.initiatorAddress);
          oprot.writeFieldEnd();
        }
        if (struct.contractAddress != null) {
          oprot.writeFieldBegin(CONTRACT_ADDRESS_FIELD_DESC);
          oprot.writeBinary(struct.contractAddress);
          oprot.writeFieldEnd();
        }
        if (struct.byteCodeObjects != null) {
          oprot.writeFieldBegin(BYTE_CODE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.byteCodeObjects.size()));
            for (com.credits.general.thrift.generated.ByteCodeObject _iter59 : struct.byteCodeObjects)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.contractState != null) {
          oprot.writeFieldBegin(CONTRACT_STATE_FIELD_DESC);
          oprot.writeBinary(struct.contractState);
          oprot.writeFieldEnd();
        }
        if (struct.method != null) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.params.size()));
            for (java.util.List<com.credits.general.thrift.generated.Variant> _iter60 : struct.params)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter60.size()));
                for (com.credits.general.thrift.generated.Variant _iter61 : _iter60)
                {
                  _iter61.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EXECUTION_TIME_FIELD_DESC);
        oprot.writeI64(struct.executionTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeByteCodeMultiple_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCodeMultiple_argsTupleScheme getScheme() {
        return new executeByteCodeMultiple_argsTupleScheme();
      }
    }

    private static class executeByteCodeMultiple_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeByteCodeMultiple_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeByteCodeMultiple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInitiatorAddress()) {
          optionals.set(0);
        }
        if (struct.isSetContractAddress()) {
          optionals.set(1);
        }
        if (struct.isSetByteCodeObjects()) {
          optionals.set(2);
        }
        if (struct.isSetContractState()) {
          optionals.set(3);
        }
        if (struct.isSetMethod()) {
          optionals.set(4);
        }
        if (struct.isSetParams()) {
          optionals.set(5);
        }
        if (struct.isSetExecutionTime()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetInitiatorAddress()) {
          oprot.writeBinary(struct.initiatorAddress);
        }
        if (struct.isSetContractAddress()) {
          oprot.writeBinary(struct.contractAddress);
        }
        if (struct.isSetByteCodeObjects()) {
          {
            oprot.writeI32(struct.byteCodeObjects.size());
            for (com.credits.general.thrift.generated.ByteCodeObject _iter62 : struct.byteCodeObjects)
            {
              _iter62.write(oprot);
            }
          }
        }
        if (struct.isSetContractState()) {
          oprot.writeBinary(struct.contractState);
        }
        if (struct.isSetMethod()) {
          oprot.writeString(struct.method);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (java.util.List<com.credits.general.thrift.generated.Variant> _iter63 : struct.params)
            {
              {
                oprot.writeI32(_iter63.size());
                for (com.credits.general.thrift.generated.Variant _iter64 : _iter63)
                {
                  _iter64.write(oprot);
                }
              }
            }
          }
        }
        if (struct.isSetExecutionTime()) {
          oprot.writeI64(struct.executionTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeByteCodeMultiple_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.initiatorAddress = iprot.readBinary();
          struct.setInitiatorAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contractAddress = iprot.readBinary();
          struct.setContractAddressIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list65.size);
            com.credits.general.thrift.generated.ByteCodeObject _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = new com.credits.general.thrift.generated.ByteCodeObject();
              _elem66.read(iprot);
              struct.byteCodeObjects.add(_elem66);
            }
          }
          struct.setByteCodeObjectsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.contractState = iprot.readBinary();
          struct.setContractStateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.method = iprot.readString();
          struct.setMethodIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.params = new java.util.ArrayList<java.util.List<com.credits.general.thrift.generated.Variant>>(_list68.size);
            java.util.List<com.credits.general.thrift.generated.Variant> _elem69;
            for (int _i70 = 0; _i70 < _list68.size; ++_i70)
            {
              {
                org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _elem69 = new java.util.ArrayList<com.credits.general.thrift.generated.Variant>(_list71.size);
                com.credits.general.thrift.generated.Variant _elem72;
                for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                {
                  _elem72 = new com.credits.general.thrift.generated.Variant();
                  _elem72.read(iprot);
                  _elem69.add(_elem72);
                }
              }
              struct.params.add(_elem69);
            }
          }
          struct.setParamsIsSet(true);
        }
        if (incoming.get(6)) {
          struct.executionTime = iprot.readI64();
          struct.setExecutionTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeByteCodeMultiple_result implements org.apache.thrift.TBase<executeByteCodeMultiple_result, executeByteCodeMultiple_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeByteCodeMultiple_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeByteCodeMultiple_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeByteCodeMultiple_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeByteCodeMultiple_resultTupleSchemeFactory();

    public ExecuteByteCodeMultipleResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecuteByteCodeMultipleResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeByteCodeMultiple_result.class, metaDataMap);
    }

    public executeByteCodeMultiple_result() {
    }

    public executeByteCodeMultiple_result(
      ExecuteByteCodeMultipleResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeByteCodeMultiple_result(executeByteCodeMultiple_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExecuteByteCodeMultipleResult(other.success);
      }
    }

    public executeByteCodeMultiple_result deepCopy() {
      return new executeByteCodeMultiple_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ExecuteByteCodeMultipleResult getSuccess() {
      return this.success;
    }

    public executeByteCodeMultiple_result setSuccess(ExecuteByteCodeMultipleResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecuteByteCodeMultipleResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeByteCodeMultiple_result)
        return this.equals((executeByteCodeMultiple_result)that);
      return false;
    }

    public boolean equals(executeByteCodeMultiple_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeByteCodeMultiple_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeByteCodeMultiple_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeByteCodeMultiple_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCodeMultiple_resultStandardScheme getScheme() {
        return new executeByteCodeMultiple_resultStandardScheme();
      }
    }

    private static class executeByteCodeMultiple_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeByteCodeMultiple_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeByteCodeMultiple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExecuteByteCodeMultipleResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeByteCodeMultiple_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeByteCodeMultiple_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeByteCodeMultiple_resultTupleScheme getScheme() {
        return new executeByteCodeMultiple_resultTupleScheme();
      }
    }

    private static class executeByteCodeMultiple_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeByteCodeMultiple_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeByteCodeMultiple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeByteCodeMultiple_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ExecuteByteCodeMultipleResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getContractMethods_args implements org.apache.thrift.TBase<getContractMethods_args, getContractMethods_args._Fields>, java.io.Serializable, Cloneable, Comparable<getContractMethods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContractMethods_args");

    private static final org.apache.thrift.protocol.TField BYTE_CODE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCodeObjects", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getContractMethods_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getContractMethods_argsTupleSchemeFactory();

    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BYTE_CODE_OBJECTS((short)1, "byteCodeObjects");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BYTE_CODE_OBJECTS
            return BYTE_CODE_OBJECTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BYTE_CODE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("byteCodeObjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.ByteCodeObject.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContractMethods_args.class, metaDataMap);
    }

    public getContractMethods_args() {
    }

    public getContractMethods_args(
      java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects)
    {
      this();
      this.byteCodeObjects = byteCodeObjects;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContractMethods_args(getContractMethods_args other) {
      if (other.isSetByteCodeObjects()) {
        java.util.List<com.credits.general.thrift.generated.ByteCodeObject> __this__byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(other.byteCodeObjects.size());
        for (com.credits.general.thrift.generated.ByteCodeObject other_element : other.byteCodeObjects) {
          __this__byteCodeObjects.add(new com.credits.general.thrift.generated.ByteCodeObject(other_element));
        }
        this.byteCodeObjects = __this__byteCodeObjects;
      }
    }

    public getContractMethods_args deepCopy() {
      return new getContractMethods_args(this);
    }

    @Override
    public void clear() {
      this.byteCodeObjects = null;
    }

    public int getByteCodeObjectsSize() {
      return (this.byteCodeObjects == null) ? 0 : this.byteCodeObjects.size();
    }

    public java.util.Iterator<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjectsIterator() {
      return (this.byteCodeObjects == null) ? null : this.byteCodeObjects.iterator();
    }

    public void addToByteCodeObjects(com.credits.general.thrift.generated.ByteCodeObject elem) {
      if (this.byteCodeObjects == null) {
        this.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>();
      }
      this.byteCodeObjects.add(elem);
    }

    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjects() {
      return this.byteCodeObjects;
    }

    public getContractMethods_args setByteCodeObjects(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) {
      this.byteCodeObjects = byteCodeObjects;
      return this;
    }

    public void unsetByteCodeObjects() {
      this.byteCodeObjects = null;
    }

    /** Returns true if field byteCodeObjects is set (has been assigned a value) and false otherwise */
    public boolean isSetByteCodeObjects() {
      return this.byteCodeObjects != null;
    }

    public void setByteCodeObjectsIsSet(boolean value) {
      if (!value) {
        this.byteCodeObjects = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BYTE_CODE_OBJECTS:
        if (value == null) {
          unsetByteCodeObjects();
        } else {
          setByteCodeObjects((java.util.List<com.credits.general.thrift.generated.ByteCodeObject>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BYTE_CODE_OBJECTS:
        return getByteCodeObjects();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BYTE_CODE_OBJECTS:
        return isSetByteCodeObjects();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getContractMethods_args)
        return this.equals((getContractMethods_args)that);
      return false;
    }

    public boolean equals(getContractMethods_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_byteCodeObjects = true && this.isSetByteCodeObjects();
      boolean that_present_byteCodeObjects = true && that.isSetByteCodeObjects();
      if (this_present_byteCodeObjects || that_present_byteCodeObjects) {
        if (!(this_present_byteCodeObjects && that_present_byteCodeObjects))
          return false;
        if (!this.byteCodeObjects.equals(that.byteCodeObjects))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetByteCodeObjects()) ? 131071 : 524287);
      if (isSetByteCodeObjects())
        hashCode = hashCode * 8191 + byteCodeObjects.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getContractMethods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetByteCodeObjects()).compareTo(other.isSetByteCodeObjects());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetByteCodeObjects()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCodeObjects, other.byteCodeObjects);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getContractMethods_args(");
      boolean first = true;

      sb.append("byteCodeObjects:");
      if (this.byteCodeObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.byteCodeObjects);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContractMethods_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractMethods_argsStandardScheme getScheme() {
        return new getContractMethods_argsStandardScheme();
      }
    }

    private static class getContractMethods_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getContractMethods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContractMethods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BYTE_CODE_OBJECTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list74.size);
                  com.credits.general.thrift.generated.ByteCodeObject _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new com.credits.general.thrift.generated.ByteCodeObject();
                    _elem75.read(iprot);
                    struct.byteCodeObjects.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setByteCodeObjectsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContractMethods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.byteCodeObjects != null) {
          oprot.writeFieldBegin(BYTE_CODE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.byteCodeObjects.size()));
            for (com.credits.general.thrift.generated.ByteCodeObject _iter77 : struct.byteCodeObjects)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContractMethods_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractMethods_argsTupleScheme getScheme() {
        return new getContractMethods_argsTupleScheme();
      }
    }

    private static class getContractMethods_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getContractMethods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContractMethods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetByteCodeObjects()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetByteCodeObjects()) {
          {
            oprot.writeI32(struct.byteCodeObjects.size());
            for (com.credits.general.thrift.generated.ByteCodeObject _iter78 : struct.byteCodeObjects)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContractMethods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list79.size);
            com.credits.general.thrift.generated.ByteCodeObject _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new com.credits.general.thrift.generated.ByteCodeObject();
              _elem80.read(iprot);
              struct.byteCodeObjects.add(_elem80);
            }
          }
          struct.setByteCodeObjectsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getContractMethods_result implements org.apache.thrift.TBase<getContractMethods_result, getContractMethods_result._Fields>, java.io.Serializable, Cloneable, Comparable<getContractMethods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContractMethods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getContractMethods_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getContractMethods_resultTupleSchemeFactory();

    public GetContractMethodsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetContractMethodsResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContractMethods_result.class, metaDataMap);
    }

    public getContractMethods_result() {
    }

    public getContractMethods_result(
      GetContractMethodsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContractMethods_result(getContractMethods_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetContractMethodsResult(other.success);
      }
    }

    public getContractMethods_result deepCopy() {
      return new getContractMethods_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetContractMethodsResult getSuccess() {
      return this.success;
    }

    public getContractMethods_result setSuccess(GetContractMethodsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetContractMethodsResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getContractMethods_result)
        return this.equals((getContractMethods_result)that);
      return false;
    }

    public boolean equals(getContractMethods_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getContractMethods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getContractMethods_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContractMethods_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractMethods_resultStandardScheme getScheme() {
        return new getContractMethods_resultStandardScheme();
      }
    }

    private static class getContractMethods_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getContractMethods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContractMethods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetContractMethodsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContractMethods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContractMethods_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractMethods_resultTupleScheme getScheme() {
        return new getContractMethods_resultTupleScheme();
      }
    }

    private static class getContractMethods_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getContractMethods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContractMethods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContractMethods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetContractMethodsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getContractVariables_args implements org.apache.thrift.TBase<getContractVariables_args, getContractVariables_args._Fields>, java.io.Serializable, Cloneable, Comparable<getContractVariables_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContractVariables_args");

    private static final org.apache.thrift.protocol.TField BYTE_CODE_OBJECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("byteCodeObjects", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CONTRACT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractState", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getContractVariables_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getContractVariables_argsTupleSchemeFactory();

    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects; // required
    public java.nio.ByteBuffer contractState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BYTE_CODE_OBJECTS((short)1, "byteCodeObjects"),
      CONTRACT_STATE((short)2, "contractState");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BYTE_CODE_OBJECTS
            return BYTE_CODE_OBJECTS;
          case 2: // CONTRACT_STATE
            return CONTRACT_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BYTE_CODE_OBJECTS, new org.apache.thrift.meta_data.FieldMetaData("byteCodeObjects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.ByteCodeObject.class))));
      tmpMap.put(_Fields.CONTRACT_STATE, new org.apache.thrift.meta_data.FieldMetaData("contractState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContractVariables_args.class, metaDataMap);
    }

    public getContractVariables_args() {
    }

    public getContractVariables_args(
      java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects,
      java.nio.ByteBuffer contractState)
    {
      this();
      this.byteCodeObjects = byteCodeObjects;
      this.contractState = org.apache.thrift.TBaseHelper.copyBinary(contractState);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContractVariables_args(getContractVariables_args other) {
      if (other.isSetByteCodeObjects()) {
        java.util.List<com.credits.general.thrift.generated.ByteCodeObject> __this__byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(other.byteCodeObjects.size());
        for (com.credits.general.thrift.generated.ByteCodeObject other_element : other.byteCodeObjects) {
          __this__byteCodeObjects.add(new com.credits.general.thrift.generated.ByteCodeObject(other_element));
        }
        this.byteCodeObjects = __this__byteCodeObjects;
      }
      if (other.isSetContractState()) {
        this.contractState = org.apache.thrift.TBaseHelper.copyBinary(other.contractState);
      }
    }

    public getContractVariables_args deepCopy() {
      return new getContractVariables_args(this);
    }

    @Override
    public void clear() {
      this.byteCodeObjects = null;
      this.contractState = null;
    }

    public int getByteCodeObjectsSize() {
      return (this.byteCodeObjects == null) ? 0 : this.byteCodeObjects.size();
    }

    public java.util.Iterator<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjectsIterator() {
      return (this.byteCodeObjects == null) ? null : this.byteCodeObjects.iterator();
    }

    public void addToByteCodeObjects(com.credits.general.thrift.generated.ByteCodeObject elem) {
      if (this.byteCodeObjects == null) {
        this.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>();
      }
      this.byteCodeObjects.add(elem);
    }

    public java.util.List<com.credits.general.thrift.generated.ByteCodeObject> getByteCodeObjects() {
      return this.byteCodeObjects;
    }

    public getContractVariables_args setByteCodeObjects(java.util.List<com.credits.general.thrift.generated.ByteCodeObject> byteCodeObjects) {
      this.byteCodeObjects = byteCodeObjects;
      return this;
    }

    public void unsetByteCodeObjects() {
      this.byteCodeObjects = null;
    }

    /** Returns true if field byteCodeObjects is set (has been assigned a value) and false otherwise */
    public boolean isSetByteCodeObjects() {
      return this.byteCodeObjects != null;
    }

    public void setByteCodeObjectsIsSet(boolean value) {
      if (!value) {
        this.byteCodeObjects = null;
      }
    }

    public byte[] getContractState() {
      setContractState(org.apache.thrift.TBaseHelper.rightSize(contractState));
      return contractState == null ? null : contractState.array();
    }

    public java.nio.ByteBuffer bufferForContractState() {
      return org.apache.thrift.TBaseHelper.copyBinary(contractState);
    }

    public getContractVariables_args setContractState(byte[] contractState) {
      this.contractState = contractState == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(contractState.clone());
      return this;
    }

    public getContractVariables_args setContractState(java.nio.ByteBuffer contractState) {
      this.contractState = org.apache.thrift.TBaseHelper.copyBinary(contractState);
      return this;
    }

    public void unsetContractState() {
      this.contractState = null;
    }

    /** Returns true if field contractState is set (has been assigned a value) and false otherwise */
    public boolean isSetContractState() {
      return this.contractState != null;
    }

    public void setContractStateIsSet(boolean value) {
      if (!value) {
        this.contractState = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BYTE_CODE_OBJECTS:
        if (value == null) {
          unsetByteCodeObjects();
        } else {
          setByteCodeObjects((java.util.List<com.credits.general.thrift.generated.ByteCodeObject>)value);
        }
        break;

      case CONTRACT_STATE:
        if (value == null) {
          unsetContractState();
        } else {
          if (value instanceof byte[]) {
            setContractState((byte[])value);
          } else {
            setContractState((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BYTE_CODE_OBJECTS:
        return getByteCodeObjects();

      case CONTRACT_STATE:
        return getContractState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BYTE_CODE_OBJECTS:
        return isSetByteCodeObjects();
      case CONTRACT_STATE:
        return isSetContractState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getContractVariables_args)
        return this.equals((getContractVariables_args)that);
      return false;
    }

    public boolean equals(getContractVariables_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_byteCodeObjects = true && this.isSetByteCodeObjects();
      boolean that_present_byteCodeObjects = true && that.isSetByteCodeObjects();
      if (this_present_byteCodeObjects || that_present_byteCodeObjects) {
        if (!(this_present_byteCodeObjects && that_present_byteCodeObjects))
          return false;
        if (!this.byteCodeObjects.equals(that.byteCodeObjects))
          return false;
      }

      boolean this_present_contractState = true && this.isSetContractState();
      boolean that_present_contractState = true && that.isSetContractState();
      if (this_present_contractState || that_present_contractState) {
        if (!(this_present_contractState && that_present_contractState))
          return false;
        if (!this.contractState.equals(that.contractState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetByteCodeObjects()) ? 131071 : 524287);
      if (isSetByteCodeObjects())
        hashCode = hashCode * 8191 + byteCodeObjects.hashCode();

      hashCode = hashCode * 8191 + ((isSetContractState()) ? 131071 : 524287);
      if (isSetContractState())
        hashCode = hashCode * 8191 + contractState.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getContractVariables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetByteCodeObjects()).compareTo(other.isSetByteCodeObjects());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetByteCodeObjects()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteCodeObjects, other.byteCodeObjects);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContractState()).compareTo(other.isSetContractState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContractState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractState, other.contractState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getContractVariables_args(");
      boolean first = true;

      sb.append("byteCodeObjects:");
      if (this.byteCodeObjects == null) {
        sb.append("null");
      } else {
        sb.append(this.byteCodeObjects);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contractState:");
      if (this.contractState == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.contractState, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContractVariables_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractVariables_argsStandardScheme getScheme() {
        return new getContractVariables_argsStandardScheme();
      }
    }

    private static class getContractVariables_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getContractVariables_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContractVariables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BYTE_CODE_OBJECTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list82.size);
                  com.credits.general.thrift.generated.ByteCodeObject _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new com.credits.general.thrift.generated.ByteCodeObject();
                    _elem83.read(iprot);
                    struct.byteCodeObjects.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setByteCodeObjectsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTRACT_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.contractState = iprot.readBinary();
                struct.setContractStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContractVariables_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.byteCodeObjects != null) {
          oprot.writeFieldBegin(BYTE_CODE_OBJECTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.byteCodeObjects.size()));
            for (com.credits.general.thrift.generated.ByteCodeObject _iter85 : struct.byteCodeObjects)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.contractState != null) {
          oprot.writeFieldBegin(CONTRACT_STATE_FIELD_DESC);
          oprot.writeBinary(struct.contractState);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContractVariables_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractVariables_argsTupleScheme getScheme() {
        return new getContractVariables_argsTupleScheme();
      }
    }

    private static class getContractVariables_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getContractVariables_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContractVariables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetByteCodeObjects()) {
          optionals.set(0);
        }
        if (struct.isSetContractState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetByteCodeObjects()) {
          {
            oprot.writeI32(struct.byteCodeObjects.size());
            for (com.credits.general.thrift.generated.ByteCodeObject _iter86 : struct.byteCodeObjects)
            {
              _iter86.write(oprot);
            }
          }
        }
        if (struct.isSetContractState()) {
          oprot.writeBinary(struct.contractState);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContractVariables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.byteCodeObjects = new java.util.ArrayList<com.credits.general.thrift.generated.ByteCodeObject>(_list87.size);
            com.credits.general.thrift.generated.ByteCodeObject _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new com.credits.general.thrift.generated.ByteCodeObject();
              _elem88.read(iprot);
              struct.byteCodeObjects.add(_elem88);
            }
          }
          struct.setByteCodeObjectsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contractState = iprot.readBinary();
          struct.setContractStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getContractVariables_result implements org.apache.thrift.TBase<getContractVariables_result, getContractVariables_result._Fields>, java.io.Serializable, Cloneable, Comparable<getContractVariables_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getContractVariables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getContractVariables_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getContractVariables_resultTupleSchemeFactory();

    public GetContractVariablesResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetContractVariablesResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContractVariables_result.class, metaDataMap);
    }

    public getContractVariables_result() {
    }

    public getContractVariables_result(
      GetContractVariablesResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContractVariables_result(getContractVariables_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetContractVariablesResult(other.success);
      }
    }

    public getContractVariables_result deepCopy() {
      return new getContractVariables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetContractVariablesResult getSuccess() {
      return this.success;
    }

    public getContractVariables_result setSuccess(GetContractVariablesResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetContractVariablesResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getContractVariables_result)
        return this.equals((getContractVariables_result)that);
      return false;
    }

    public boolean equals(getContractVariables_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getContractVariables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getContractVariables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getContractVariables_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractVariables_resultStandardScheme getScheme() {
        return new getContractVariables_resultStandardScheme();
      }
    }

    private static class getContractVariables_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getContractVariables_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getContractVariables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetContractVariablesResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getContractVariables_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getContractVariables_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getContractVariables_resultTupleScheme getScheme() {
        return new getContractVariables_resultTupleScheme();
      }
    }

    private static class getContractVariables_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getContractVariables_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getContractVariables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getContractVariables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetContractVariablesResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class compileSourceCode_args implements org.apache.thrift.TBase<compileSourceCode_args, compileSourceCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<compileSourceCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compileSourceCode_args");

    private static final org.apache.thrift.protocol.TField SOURCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new compileSourceCode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new compileSourceCode_argsTupleSchemeFactory();

    public java.lang.String sourceCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_CODE((short)1, "sourceCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_CODE
            return SOURCE_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("sourceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compileSourceCode_args.class, metaDataMap);
    }

    public compileSourceCode_args() {
    }

    public compileSourceCode_args(
      java.lang.String sourceCode)
    {
      this();
      this.sourceCode = sourceCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compileSourceCode_args(compileSourceCode_args other) {
      if (other.isSetSourceCode()) {
        this.sourceCode = other.sourceCode;
      }
    }

    public compileSourceCode_args deepCopy() {
      return new compileSourceCode_args(this);
    }

    @Override
    public void clear() {
      this.sourceCode = null;
    }

    public java.lang.String getSourceCode() {
      return this.sourceCode;
    }

    public compileSourceCode_args setSourceCode(java.lang.String sourceCode) {
      this.sourceCode = sourceCode;
      return this;
    }

    public void unsetSourceCode() {
      this.sourceCode = null;
    }

    /** Returns true if field sourceCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceCode() {
      return this.sourceCode != null;
    }

    public void setSourceCodeIsSet(boolean value) {
      if (!value) {
        this.sourceCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SOURCE_CODE:
        if (value == null) {
          unsetSourceCode();
        } else {
          setSourceCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_CODE:
        return getSourceCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_CODE:
        return isSetSourceCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof compileSourceCode_args)
        return this.equals((compileSourceCode_args)that);
      return false;
    }

    public boolean equals(compileSourceCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sourceCode = true && this.isSetSourceCode();
      boolean that_present_sourceCode = true && that.isSetSourceCode();
      if (this_present_sourceCode || that_present_sourceCode) {
        if (!(this_present_sourceCode && that_present_sourceCode))
          return false;
        if (!this.sourceCode.equals(that.sourceCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSourceCode()) ? 131071 : 524287);
      if (isSetSourceCode())
        hashCode = hashCode * 8191 + sourceCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(compileSourceCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSourceCode()).compareTo(other.isSetSourceCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceCode, other.sourceCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("compileSourceCode_args(");
      boolean first = true;

      sb.append("sourceCode:");
      if (this.sourceCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compileSourceCode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compileSourceCode_argsStandardScheme getScheme() {
        return new compileSourceCode_argsStandardScheme();
      }
    }

    private static class compileSourceCode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<compileSourceCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compileSourceCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceCode = iprot.readString();
                struct.setSourceCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compileSourceCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sourceCode != null) {
          oprot.writeFieldBegin(SOURCE_CODE_FIELD_DESC);
          oprot.writeString(struct.sourceCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compileSourceCode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compileSourceCode_argsTupleScheme getScheme() {
        return new compileSourceCode_argsTupleScheme();
      }
    }

    private static class compileSourceCode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<compileSourceCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compileSourceCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSourceCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSourceCode()) {
          oprot.writeString(struct.sourceCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compileSourceCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sourceCode = iprot.readString();
          struct.setSourceCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class compileSourceCode_result implements org.apache.thrift.TBase<compileSourceCode_result, compileSourceCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<compileSourceCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compileSourceCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new compileSourceCode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new compileSourceCode_resultTupleSchemeFactory();

    public CompileSourceCodeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompileSourceCodeResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compileSourceCode_result.class, metaDataMap);
    }

    public compileSourceCode_result() {
    }

    public compileSourceCode_result(
      CompileSourceCodeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compileSourceCode_result(compileSourceCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompileSourceCodeResult(other.success);
      }
    }

    public compileSourceCode_result deepCopy() {
      return new compileSourceCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CompileSourceCodeResult getSuccess() {
      return this.success;
    }

    public compileSourceCode_result setSuccess(CompileSourceCodeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompileSourceCodeResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof compileSourceCode_result)
        return this.equals((compileSourceCode_result)that);
      return false;
    }

    public boolean equals(compileSourceCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(compileSourceCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("compileSourceCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compileSourceCode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compileSourceCode_resultStandardScheme getScheme() {
        return new compileSourceCode_resultStandardScheme();
      }
    }

    private static class compileSourceCode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<compileSourceCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compileSourceCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompileSourceCodeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compileSourceCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compileSourceCode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compileSourceCode_resultTupleScheme getScheme() {
        return new compileSourceCode_resultTupleScheme();
      }
    }

    private static class compileSourceCode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<compileSourceCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compileSourceCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compileSourceCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CompileSourceCodeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
