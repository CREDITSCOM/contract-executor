/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.credits.general.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-15")
public class BigDecimal implements org.apache.thrift.TBase<BigDecimal, BigDecimal._Fields>, java.io.Serializable, Cloneable, Comparable<BigDecimal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BigDecimal");

  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("scale", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ROUNDING_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("roundingMode", org.apache.thrift.protocol.TType.BYTE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BigDecimalStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BigDecimalTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Amount amount; // required
  public byte scale; // required
  public byte roundingMode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AMOUNT((short)1, "amount"),
    SCALE((short)2, "scale"),
    ROUNDING_MODE((short)3, "roundingMode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AMOUNT
          return AMOUNT;
        case 2: // SCALE
          return SCALE;
        case 3: // ROUNDING_MODE
          return ROUNDING_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCALE_ISSET_ID = 0;
  private static final int __ROUNDINGMODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Amount.class)));
    tmpMap.put(_Fields.SCALE, new org.apache.thrift.meta_data.FieldMetaData("scale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ROUNDING_MODE, new org.apache.thrift.meta_data.FieldMetaData("roundingMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BigDecimal.class, metaDataMap);
  }

  public BigDecimal() {
  }

  public BigDecimal(
    Amount amount,
    byte scale,
    byte roundingMode)
  {
    this();
    this.amount = amount;
    this.scale = scale;
    setScaleIsSet(true);
    this.roundingMode = roundingMode;
    setRoundingModeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BigDecimal(BigDecimal other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAmount()) {
      this.amount = new Amount(other.amount);
    }
    this.scale = other.scale;
    this.roundingMode = other.roundingMode;
  }

  public BigDecimal deepCopy() {
    return new BigDecimal(this);
  }

  @Override
  public void clear() {
    this.amount = null;
    setScaleIsSet(false);
    this.scale = 0;
    setRoundingModeIsSet(false);
    this.roundingMode = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public Amount getAmount() {
    return this.amount;
  }

  public BigDecimal setAmount(@org.apache.thrift.annotation.Nullable Amount amount) {
    this.amount = amount;
    return this;
  }

  public void unsetAmount() {
    this.amount = null;
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return this.amount != null;
  }

  public void setAmountIsSet(boolean value) {
    if (!value) {
      this.amount = null;
    }
  }

  public byte getScale() {
    return this.scale;
  }

  public BigDecimal setScale(byte scale) {
    this.scale = scale;
    setScaleIsSet(true);
    return this;
  }

  public void unsetScale() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  /** Returns true if field scale is set (has been assigned a value) and false otherwise */
  public boolean isSetScale() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCALE_ISSET_ID);
  }

  public void setScaleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCALE_ISSET_ID, value);
  }

  public byte getRoundingMode() {
    return this.roundingMode;
  }

  public BigDecimal setRoundingMode(byte roundingMode) {
    this.roundingMode = roundingMode;
    setRoundingModeIsSet(true);
    return this;
  }

  public void unsetRoundingMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROUNDINGMODE_ISSET_ID);
  }

  /** Returns true if field roundingMode is set (has been assigned a value) and false otherwise */
  public boolean isSetRoundingMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROUNDINGMODE_ISSET_ID);
  }

  public void setRoundingModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROUNDINGMODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Amount)value);
      }
      break;

    case SCALE:
      if (value == null) {
        unsetScale();
      } else {
        setScale((java.lang.Byte)value);
      }
      break;

    case ROUNDING_MODE:
      if (value == null) {
        unsetRoundingMode();
      } else {
        setRoundingMode((java.lang.Byte)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AMOUNT:
      return getAmount();

    case SCALE:
      return getScale();

    case ROUNDING_MODE:
      return getRoundingMode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AMOUNT:
      return isSetAmount();
    case SCALE:
      return isSetScale();
    case ROUNDING_MODE:
      return isSetRoundingMode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BigDecimal)
      return this.equals((BigDecimal)that);
    return false;
  }

  public boolean equals(BigDecimal that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (!this.amount.equals(that.amount))
        return false;
    }

    boolean this_present_scale = true;
    boolean that_present_scale = true;
    if (this_present_scale || that_present_scale) {
      if (!(this_present_scale && that_present_scale))
        return false;
      if (this.scale != that.scale)
        return false;
    }

    boolean this_present_roundingMode = true;
    boolean that_present_roundingMode = true;
    if (this_present_roundingMode || that_present_roundingMode) {
      if (!(this_present_roundingMode && that_present_roundingMode))
        return false;
      if (this.roundingMode != that.roundingMode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
    if (isSetAmount())
      hashCode = hashCode * 8191 + amount.hashCode();

    hashCode = hashCode * 8191 + (int) (scale);

    hashCode = hashCode * 8191 + (int) (roundingMode);

    return hashCode;
  }

  @Override
  public int compareTo(BigDecimal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScale()).compareTo(other.isSetScale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scale, other.scale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoundingMode()).compareTo(other.isSetRoundingMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoundingMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundingMode, other.roundingMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BigDecimal(");
    boolean first = true;

    sb.append("amount:");
    if (this.amount == null) {
      sb.append("null");
    } else {
      sb.append(this.amount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scale:");
    sb.append(this.scale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roundingMode:");
    sb.append(this.roundingMode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (amount != null) {
      amount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BigDecimalStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BigDecimalStandardScheme getScheme() {
      return new BigDecimalStandardScheme();
    }
  }

  private static class BigDecimalStandardScheme extends org.apache.thrift.scheme.StandardScheme<BigDecimal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BigDecimal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.amount = new Amount();
              struct.amount.read(iprot);
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.scale = iprot.readByte();
              struct.setScaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROUNDING_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.roundingMode = iprot.readByte();
              struct.setRoundingModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BigDecimal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.amount != null) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        struct.amount.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCALE_FIELD_DESC);
      oprot.writeByte(struct.scale);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROUNDING_MODE_FIELD_DESC);
      oprot.writeByte(struct.roundingMode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BigDecimalTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BigDecimalTupleScheme getScheme() {
      return new BigDecimalTupleScheme();
    }
  }

  private static class BigDecimalTupleScheme extends org.apache.thrift.scheme.TupleScheme<BigDecimal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BigDecimal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAmount()) {
        optionals.set(0);
      }
      if (struct.isSetScale()) {
        optionals.set(1);
      }
      if (struct.isSetRoundingMode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAmount()) {
        struct.amount.write(oprot);
      }
      if (struct.isSetScale()) {
        oprot.writeByte(struct.scale);
      }
      if (struct.isSetRoundingMode()) {
        oprot.writeByte(struct.roundingMode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BigDecimal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.amount = new Amount();
        struct.amount.read(iprot);
        struct.setAmountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scale = iprot.readByte();
        struct.setScaleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.roundingMode = iprot.readByte();
        struct.setRoundingModeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

