/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.credits.client.node.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-12-10")
public class TokenInfo implements org.apache.thrift.TBase<TokenInfo, TokenInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TokenInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenInfo");

  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_SUPPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSupply", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TRANSFERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transfersCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TRANSACTIONS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionsCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField HOLDERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("holdersCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STANDART_FIELD_DESC = new org.apache.thrift.protocol.TField("standart", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TokenInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TokenInfoTupleSchemeFactory();

  public java.nio.ByteBuffer address; // required
  public java.lang.String code; // required
  public java.lang.String name; // required
  public java.lang.String totalSupply; // required
  public java.nio.ByteBuffer owner; // required
  public int transfersCount; // required
  public int transactionsCount; // required
  public int holdersCount; // required
  /**
   * 
   * @see com.credits.general.thrift.generated.TokenStandart
   */
  public com.credits.general.thrift.generated.TokenStandart standart; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS((short)1, "address"),
    CODE((short)2, "code"),
    NAME((short)3, "name"),
    TOTAL_SUPPLY((short)4, "totalSupply"),
    OWNER((short)5, "owner"),
    TRANSFERS_COUNT((short)6, "transfersCount"),
    TRANSACTIONS_COUNT((short)7, "transactionsCount"),
    HOLDERS_COUNT((short)8, "holdersCount"),
    /**
     * 
     * @see com.credits.general.thrift.generated.TokenStandart
     */
    STANDART((short)9, "standart");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS
          return ADDRESS;
        case 2: // CODE
          return CODE;
        case 3: // NAME
          return NAME;
        case 4: // TOTAL_SUPPLY
          return TOTAL_SUPPLY;
        case 5: // OWNER
          return OWNER;
        case 6: // TRANSFERS_COUNT
          return TRANSFERS_COUNT;
        case 7: // TRANSACTIONS_COUNT
          return TRANSACTIONS_COUNT;
        case 8: // HOLDERS_COUNT
          return HOLDERS_COUNT;
        case 9: // STANDART
          return STANDART;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRANSFERSCOUNT_ISSET_ID = 0;
  private static final int __TRANSACTIONSCOUNT_ISSET_ID = 1;
  private static final int __HOLDERSCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Address")));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TokenCode")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_SUPPLY, new org.apache.thrift.meta_data.FieldMetaData("totalSupply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "TokenAmount")));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Address")));
    tmpMap.put(_Fields.TRANSFERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("transfersCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRANSACTIONS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("transactionsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOLDERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("holdersCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STANDART, new org.apache.thrift.meta_data.FieldMetaData("standart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.credits.general.thrift.generated.TokenStandart.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenInfo.class, metaDataMap);
  }

  public TokenInfo() {
  }

  public TokenInfo(
    java.nio.ByteBuffer address,
    java.lang.String code,
    java.lang.String name,
    java.lang.String totalSupply,
    java.nio.ByteBuffer owner,
    int transfersCount,
    int transactionsCount,
    int holdersCount,
    com.credits.general.thrift.generated.TokenStandart standart)
  {
    this();
    this.address = org.apache.thrift.TBaseHelper.copyBinary(address);
    this.code = code;
    this.name = name;
    this.totalSupply = totalSupply;
    this.owner = org.apache.thrift.TBaseHelper.copyBinary(owner);
    this.transfersCount = transfersCount;
    setTransfersCountIsSet(true);
    this.transactionsCount = transactionsCount;
    setTransactionsCountIsSet(true);
    this.holdersCount = holdersCount;
    setHoldersCountIsSet(true);
    this.standart = standart;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenInfo(TokenInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAddress()) {
      this.address = org.apache.thrift.TBaseHelper.copyBinary(other.address);
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetTotalSupply()) {
      this.totalSupply = other.totalSupply;
    }
    if (other.isSetOwner()) {
      this.owner = org.apache.thrift.TBaseHelper.copyBinary(other.owner);
    }
    this.transfersCount = other.transfersCount;
    this.transactionsCount = other.transactionsCount;
    this.holdersCount = other.holdersCount;
    if (other.isSetStandart()) {
      this.standart = other.standart;
    }
  }

  public TokenInfo deepCopy() {
    return new TokenInfo(this);
  }

  @Override
  public void clear() {
    this.address = null;
    this.code = null;
    this.name = null;
    this.totalSupply = null;
    this.owner = null;
    setTransfersCountIsSet(false);
    this.transfersCount = 0;
    setTransactionsCountIsSet(false);
    this.transactionsCount = 0;
    setHoldersCountIsSet(false);
    this.holdersCount = 0;
    this.standart = null;
  }

  public byte[] getAddress() {
    setAddress(org.apache.thrift.TBaseHelper.rightSize(address));
    return address == null ? null : address.array();
  }

  public java.nio.ByteBuffer bufferForAddress() {
    return org.apache.thrift.TBaseHelper.copyBinary(address);
  }

  public TokenInfo setAddress(byte[] address) {
    this.address = address == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(address.clone());
    return this;
  }

  public TokenInfo setAddress(java.nio.ByteBuffer address) {
    this.address = org.apache.thrift.TBaseHelper.copyBinary(address);
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public java.lang.String getCode() {
    return this.code;
  }

  public TokenInfo setCode(java.lang.String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public TokenInfo setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getTotalSupply() {
    return this.totalSupply;
  }

  public TokenInfo setTotalSupply(java.lang.String totalSupply) {
    this.totalSupply = totalSupply;
    return this;
  }

  public void unsetTotalSupply() {
    this.totalSupply = null;
  }

  /** Returns true if field totalSupply is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSupply() {
    return this.totalSupply != null;
  }

  public void setTotalSupplyIsSet(boolean value) {
    if (!value) {
      this.totalSupply = null;
    }
  }

  public byte[] getOwner() {
    setOwner(org.apache.thrift.TBaseHelper.rightSize(owner));
    return owner == null ? null : owner.array();
  }

  public java.nio.ByteBuffer bufferForOwner() {
    return org.apache.thrift.TBaseHelper.copyBinary(owner);
  }

  public TokenInfo setOwner(byte[] owner) {
    this.owner = owner == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(owner.clone());
    return this;
  }

  public TokenInfo setOwner(java.nio.ByteBuffer owner) {
    this.owner = org.apache.thrift.TBaseHelper.copyBinary(owner);
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public int getTransfersCount() {
    return this.transfersCount;
  }

  public TokenInfo setTransfersCount(int transfersCount) {
    this.transfersCount = transfersCount;
    setTransfersCountIsSet(true);
    return this;
  }

  public void unsetTransfersCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFERSCOUNT_ISSET_ID);
  }

  /** Returns true if field transfersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransfersCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFERSCOUNT_ISSET_ID);
  }

  public void setTransfersCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFERSCOUNT_ISSET_ID, value);
  }

  public int getTransactionsCount() {
    return this.transactionsCount;
  }

  public TokenInfo setTransactionsCount(int transactionsCount) {
    this.transactionsCount = transactionsCount;
    setTransactionsCountIsSet(true);
    return this;
  }

  public void unsetTransactionsCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSACTIONSCOUNT_ISSET_ID);
  }

  /** Returns true if field transactionsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionsCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSACTIONSCOUNT_ISSET_ID);
  }

  public void setTransactionsCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSACTIONSCOUNT_ISSET_ID, value);
  }

  public int getHoldersCount() {
    return this.holdersCount;
  }

  public TokenInfo setHoldersCount(int holdersCount) {
    this.holdersCount = holdersCount;
    setHoldersCountIsSet(true);
    return this;
  }

  public void unsetHoldersCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HOLDERSCOUNT_ISSET_ID);
  }

  /** Returns true if field holdersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetHoldersCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HOLDERSCOUNT_ISSET_ID);
  }

  public void setHoldersCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HOLDERSCOUNT_ISSET_ID, value);
  }

  /**
   * 
   * @see com.credits.general.thrift.generated.TokenStandart
   */
  public com.credits.general.thrift.generated.TokenStandart getStandart() {
    return this.standart;
  }

  /**
   * 
   * @see com.credits.general.thrift.generated.TokenStandart
   */
  public TokenInfo setStandart(com.credits.general.thrift.generated.TokenStandart standart) {
    this.standart = standart;
    return this;
  }

  public void unsetStandart() {
    this.standart = null;
  }

  /** Returns true if field standart is set (has been assigned a value) and false otherwise */
  public boolean isSetStandart() {
    return this.standart != null;
  }

  public void setStandartIsSet(boolean value) {
    if (!value) {
      this.standart = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        if (value instanceof byte[]) {
          setAddress((byte[])value);
        } else {
          setAddress((java.nio.ByteBuffer)value);
        }
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case TOTAL_SUPPLY:
      if (value == null) {
        unsetTotalSupply();
      } else {
        setTotalSupply((java.lang.String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        if (value instanceof byte[]) {
          setOwner((byte[])value);
        } else {
          setOwner((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TRANSFERS_COUNT:
      if (value == null) {
        unsetTransfersCount();
      } else {
        setTransfersCount((java.lang.Integer)value);
      }
      break;

    case TRANSACTIONS_COUNT:
      if (value == null) {
        unsetTransactionsCount();
      } else {
        setTransactionsCount((java.lang.Integer)value);
      }
      break;

    case HOLDERS_COUNT:
      if (value == null) {
        unsetHoldersCount();
      } else {
        setHoldersCount((java.lang.Integer)value);
      }
      break;

    case STANDART:
      if (value == null) {
        unsetStandart();
      } else {
        setStandart((com.credits.general.thrift.generated.TokenStandart)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS:
      return getAddress();

    case CODE:
      return getCode();

    case NAME:
      return getName();

    case TOTAL_SUPPLY:
      return getTotalSupply();

    case OWNER:
      return getOwner();

    case TRANSFERS_COUNT:
      return getTransfersCount();

    case TRANSACTIONS_COUNT:
      return getTransactionsCount();

    case HOLDERS_COUNT:
      return getHoldersCount();

    case STANDART:
      return getStandart();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS:
      return isSetAddress();
    case CODE:
      return isSetCode();
    case NAME:
      return isSetName();
    case TOTAL_SUPPLY:
      return isSetTotalSupply();
    case OWNER:
      return isSetOwner();
    case TRANSFERS_COUNT:
      return isSetTransfersCount();
    case TRANSACTIONS_COUNT:
      return isSetTransactionsCount();
    case HOLDERS_COUNT:
      return isSetHoldersCount();
    case STANDART:
      return isSetStandart();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenInfo)
      return this.equals((TokenInfo)that);
    return false;
  }

  public boolean equals(TokenInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_totalSupply = true && this.isSetTotalSupply();
    boolean that_present_totalSupply = true && that.isSetTotalSupply();
    if (this_present_totalSupply || that_present_totalSupply) {
      if (!(this_present_totalSupply && that_present_totalSupply))
        return false;
      if (!this.totalSupply.equals(that.totalSupply))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_transfersCount = true;
    boolean that_present_transfersCount = true;
    if (this_present_transfersCount || that_present_transfersCount) {
      if (!(this_present_transfersCount && that_present_transfersCount))
        return false;
      if (this.transfersCount != that.transfersCount)
        return false;
    }

    boolean this_present_transactionsCount = true;
    boolean that_present_transactionsCount = true;
    if (this_present_transactionsCount || that_present_transactionsCount) {
      if (!(this_present_transactionsCount && that_present_transactionsCount))
        return false;
      if (this.transactionsCount != that.transactionsCount)
        return false;
    }

    boolean this_present_holdersCount = true;
    boolean that_present_holdersCount = true;
    if (this_present_holdersCount || that_present_holdersCount) {
      if (!(this_present_holdersCount && that_present_holdersCount))
        return false;
      if (this.holdersCount != that.holdersCount)
        return false;
    }

    boolean this_present_standart = true && this.isSetStandart();
    boolean that_present_standart = true && that.isSetStandart();
    if (this_present_standart || that_present_standart) {
      if (!(this_present_standart && that_present_standart))
        return false;
      if (!this.standart.equals(that.standart))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalSupply()) ? 131071 : 524287);
    if (isSetTotalSupply())
      hashCode = hashCode * 8191 + totalSupply.hashCode();

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + transfersCount;

    hashCode = hashCode * 8191 + transactionsCount;

    hashCode = hashCode * 8191 + holdersCount;

    hashCode = hashCode * 8191 + ((isSetStandart()) ? 131071 : 524287);
    if (isSetStandart())
      hashCode = hashCode * 8191 + standart.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TokenInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalSupply()).compareTo(other.isSetTotalSupply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSupply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSupply, other.totalSupply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransfersCount()).compareTo(other.isSetTransfersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransfersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transfersCount, other.transfersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTransactionsCount()).compareTo(other.isSetTransactionsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionsCount, other.transactionsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHoldersCount()).compareTo(other.isSetHoldersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHoldersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.holdersCount, other.holdersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStandart()).compareTo(other.isSetStandart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standart, other.standart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TokenInfo(");
    boolean first = true;

    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.address, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSupply:");
    if (this.totalSupply == null) {
      sb.append("null");
    } else {
      sb.append(this.totalSupply);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.owner, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transfersCount:");
    sb.append(this.transfersCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionsCount:");
    sb.append(this.transactionsCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("holdersCount:");
    sb.append(this.holdersCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("standart:");
    if (this.standart == null) {
      sb.append("null");
    } else {
      sb.append(this.standart);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenInfoStandardScheme getScheme() {
      return new TokenInfoStandardScheme();
    }
  }

  private static class TokenInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TokenInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readBinary();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_SUPPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalSupply = iprot.readString();
              struct.setTotalSupplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readBinary();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANSFERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transfersCount = iprot.readI32();
              struct.setTransfersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRANSACTIONS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transactionsCount = iprot.readI32();
              struct.setTransactionsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOLDERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.holdersCount = iprot.readI32();
              struct.setHoldersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STANDART
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.standart = com.credits.general.thrift.generated.TokenStandart.findByValue(iprot.readI32());
              struct.setStandartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeBinary(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.totalSupply != null) {
        oprot.writeFieldBegin(TOTAL_SUPPLY_FIELD_DESC);
        oprot.writeString(struct.totalSupply);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeBinary(struct.owner);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRANSFERS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.transfersCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSACTIONS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.transactionsCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOLDERS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.holdersCount);
      oprot.writeFieldEnd();
      if (struct.standart != null) {
        oprot.writeFieldBegin(STANDART_FIELD_DESC);
        oprot.writeI32(struct.standart.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenInfoTupleScheme getScheme() {
      return new TokenInfoTupleScheme();
    }
  }

  private static class TokenInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TokenInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAddress()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetTotalSupply()) {
        optionals.set(3);
      }
      if (struct.isSetOwner()) {
        optionals.set(4);
      }
      if (struct.isSetTransfersCount()) {
        optionals.set(5);
      }
      if (struct.isSetTransactionsCount()) {
        optionals.set(6);
      }
      if (struct.isSetHoldersCount()) {
        optionals.set(7);
      }
      if (struct.isSetStandart()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAddress()) {
        oprot.writeBinary(struct.address);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTotalSupply()) {
        oprot.writeString(struct.totalSupply);
      }
      if (struct.isSetOwner()) {
        oprot.writeBinary(struct.owner);
      }
      if (struct.isSetTransfersCount()) {
        oprot.writeI32(struct.transfersCount);
      }
      if (struct.isSetTransactionsCount()) {
        oprot.writeI32(struct.transactionsCount);
      }
      if (struct.isSetHoldersCount()) {
        oprot.writeI32(struct.holdersCount);
      }
      if (struct.isSetStandart()) {
        oprot.writeI32(struct.standart.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.address = iprot.readBinary();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalSupply = iprot.readString();
        struct.setTotalSupplyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.owner = iprot.readBinary();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.transfersCount = iprot.readI32();
        struct.setTransfersCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.transactionsCount = iprot.readI32();
        struct.setTransactionsCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.holdersCount = iprot.readI32();
        struct.setHoldersCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.standart = com.credits.general.thrift.generated.TokenStandart.findByValue(iprot.readI32());
        struct.setStandartIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

