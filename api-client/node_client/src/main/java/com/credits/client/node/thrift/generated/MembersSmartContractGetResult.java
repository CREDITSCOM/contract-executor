/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.credits.client.node.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-15")
public class MembersSmartContractGetResult implements org.apache.thrift.TBase<MembersSmartContractGetResult, MembersSmartContractGetResult._Fields>, java.io.Serializable, Cloneable, Comparable<MembersSmartContractGetResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MembersSmartContractGetResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DECIMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("decimal", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_COINS_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCoins", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MembersSmartContractGetResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MembersSmartContractGetResultTupleSchemeFactory();

  public com.credits.general.thrift.generated.APIResponse status; // required
  public java.lang.String name; // required
  public java.lang.String owner; // required
  public java.lang.String decimal; // required
  public java.lang.String totalCoins; // required
  public java.lang.String symbol; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    NAME((short)2, "name"),
    OWNER((short)3, "owner"),
    DECIMAL((short)4, "decimal"),
    TOTAL_COINS((short)5, "totalCoins"),
    SYMBOL((short)6, "symbol");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // NAME
          return NAME;
        case 3: // OWNER
          return OWNER;
        case 4: // DECIMAL
          return DECIMAL;
        case 5: // TOTAL_COINS
          return TOTAL_COINS;
        case 6: // SYMBOL
          return SYMBOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.APIResponse.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECIMAL, new org.apache.thrift.meta_data.FieldMetaData("decimal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COINS, new org.apache.thrift.meta_data.FieldMetaData("totalCoins", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MembersSmartContractGetResult.class, metaDataMap);
  }

  public MembersSmartContractGetResult() {
  }

  public MembersSmartContractGetResult(
    com.credits.general.thrift.generated.APIResponse status,
    java.lang.String name,
    java.lang.String owner,
    java.lang.String decimal,
    java.lang.String totalCoins,
    java.lang.String symbol)
  {
    this();
    this.status = status;
    this.name = name;
    this.owner = owner;
    this.decimal = decimal;
    this.totalCoins = totalCoins;
    this.symbol = symbol;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MembersSmartContractGetResult(MembersSmartContractGetResult other) {
    if (other.isSetStatus()) {
      this.status = new com.credits.general.thrift.generated.APIResponse(other.status);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetDecimal()) {
      this.decimal = other.decimal;
    }
    if (other.isSetTotalCoins()) {
      this.totalCoins = other.totalCoins;
    }
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
  }

  public MembersSmartContractGetResult deepCopy() {
    return new MembersSmartContractGetResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.name = null;
    this.owner = null;
    this.decimal = null;
    this.totalCoins = null;
    this.symbol = null;
  }

  public com.credits.general.thrift.generated.APIResponse getStatus() {
    return this.status;
  }

  public MembersSmartContractGetResult setStatus(com.credits.general.thrift.generated.APIResponse status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public MembersSmartContractGetResult setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getOwner() {
    return this.owner;
  }

  public MembersSmartContractGetResult setOwner(java.lang.String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public java.lang.String getDecimal() {
    return this.decimal;
  }

  public MembersSmartContractGetResult setDecimal(java.lang.String decimal) {
    this.decimal = decimal;
    return this;
  }

  public void unsetDecimal() {
    this.decimal = null;
  }

  /** Returns true if field decimal is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimal() {
    return this.decimal != null;
  }

  public void setDecimalIsSet(boolean value) {
    if (!value) {
      this.decimal = null;
    }
  }

  public java.lang.String getTotalCoins() {
    return this.totalCoins;
  }

  public MembersSmartContractGetResult setTotalCoins(java.lang.String totalCoins) {
    this.totalCoins = totalCoins;
    return this;
  }

  public void unsetTotalCoins() {
    this.totalCoins = null;
  }

  /** Returns true if field totalCoins is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCoins() {
    return this.totalCoins != null;
  }

  public void setTotalCoinsIsSet(boolean value) {
    if (!value) {
      this.totalCoins = null;
    }
  }

  public java.lang.String getSymbol() {
    return this.symbol;
  }

  public MembersSmartContractGetResult setSymbol(java.lang.String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.credits.general.thrift.generated.APIResponse)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((java.lang.String)value);
      }
      break;

    case DECIMAL:
      if (value == null) {
        unsetDecimal();
      } else {
        setDecimal((java.lang.String)value);
      }
      break;

    case TOTAL_COINS:
      if (value == null) {
        unsetTotalCoins();
      } else {
        setTotalCoins((java.lang.String)value);
      }
      break;

    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case NAME:
      return getName();

    case OWNER:
      return getOwner();

    case DECIMAL:
      return getDecimal();

    case TOTAL_COINS:
      return getTotalCoins();

    case SYMBOL:
      return getSymbol();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case NAME:
      return isSetName();
    case OWNER:
      return isSetOwner();
    case DECIMAL:
      return isSetDecimal();
    case TOTAL_COINS:
      return isSetTotalCoins();
    case SYMBOL:
      return isSetSymbol();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MembersSmartContractGetResult)
      return this.equals((MembersSmartContractGetResult)that);
    return false;
  }

  public boolean equals(MembersSmartContractGetResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_decimal = true && this.isSetDecimal();
    boolean that_present_decimal = true && that.isSetDecimal();
    if (this_present_decimal || that_present_decimal) {
      if (!(this_present_decimal && that_present_decimal))
        return false;
      if (!this.decimal.equals(that.decimal))
        return false;
    }

    boolean this_present_totalCoins = true && this.isSetTotalCoins();
    boolean that_present_totalCoins = true && that.isSetTotalCoins();
    if (this_present_totalCoins || that_present_totalCoins) {
      if (!(this_present_totalCoins && that_present_totalCoins))
        return false;
      if (!this.totalCoins.equals(that.totalCoins))
        return false;
    }

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + ((isSetDecimal()) ? 131071 : 524287);
    if (isSetDecimal())
      hashCode = hashCode * 8191 + decimal.hashCode();

    hashCode = hashCode * 8191 + ((isSetTotalCoins()) ? 131071 : 524287);
    if (isSetTotalCoins())
      hashCode = hashCode * 8191 + totalCoins.hashCode();

    hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
    if (isSetSymbol())
      hashCode = hashCode * 8191 + symbol.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MembersSmartContractGetResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDecimal()).compareTo(other.isSetDecimal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimal, other.decimal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalCoins()).compareTo(other.isSetTotalCoins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCoins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCoins, other.totalCoins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MembersSmartContractGetResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("decimal:");
    if (this.decimal == null) {
      sb.append("null");
    } else {
      sb.append(this.decimal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCoins:");
    if (this.totalCoins == null) {
      sb.append("null");
    } else {
      sb.append(this.totalCoins);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("symbol:");
    if (this.symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.symbol);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MembersSmartContractGetResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MembersSmartContractGetResultStandardScheme getScheme() {
      return new MembersSmartContractGetResultStandardScheme();
    }
  }

  private static class MembersSmartContractGetResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MembersSmartContractGetResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MembersSmartContractGetResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new com.credits.general.thrift.generated.APIResponse();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DECIMAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.decimal = iprot.readString();
              struct.setDecimalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_COINS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalCoins = iprot.readString();
              struct.setTotalCoinsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MembersSmartContractGetResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.decimal != null) {
        oprot.writeFieldBegin(DECIMAL_FIELD_DESC);
        oprot.writeString(struct.decimal);
        oprot.writeFieldEnd();
      }
      if (struct.totalCoins != null) {
        oprot.writeFieldBegin(TOTAL_COINS_FIELD_DESC);
        oprot.writeString(struct.totalCoins);
        oprot.writeFieldEnd();
      }
      if (struct.symbol != null) {
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeString(struct.symbol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MembersSmartContractGetResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MembersSmartContractGetResultTupleScheme getScheme() {
      return new MembersSmartContractGetResultTupleScheme();
    }
  }

  private static class MembersSmartContractGetResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MembersSmartContractGetResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MembersSmartContractGetResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetOwner()) {
        optionals.set(2);
      }
      if (struct.isSetDecimal()) {
        optionals.set(3);
      }
      if (struct.isSetTotalCoins()) {
        optionals.set(4);
      }
      if (struct.isSetSymbol()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetDecimal()) {
        oprot.writeString(struct.decimal);
      }
      if (struct.isSetTotalCoins()) {
        oprot.writeString(struct.totalCoins);
      }
      if (struct.isSetSymbol()) {
        oprot.writeString(struct.symbol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MembersSmartContractGetResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.status = new com.credits.general.thrift.generated.APIResponse();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(3)) {
        struct.decimal = iprot.readString();
        struct.setDecimalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalCoins = iprot.readString();
        struct.setTotalCoinsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.symbol = iprot.readString();
        struct.setSymbolIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

