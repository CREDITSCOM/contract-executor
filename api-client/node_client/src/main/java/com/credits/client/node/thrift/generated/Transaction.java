/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.credits.client.node.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-17")
public class Transaction implements org.apache.thrift.TBase<Transaction, Transaction._Fields>, java.io.Serializable, Cloneable, Comparable<Transaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SMART_CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("smartContract", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField TIME_CREATION_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCreation", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField USER_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userFields", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SMART_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("smartInfo", org.apache.thrift.protocol.TType.STRUCT, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransactionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransactionTupleSchemeFactory();

  public long id; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer source; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer target; // required
  public @org.apache.thrift.annotation.Nullable com.credits.general.thrift.generated.Amount amount; // required
  public @org.apache.thrift.annotation.Nullable com.credits.general.thrift.generated.Amount balance; // required
  public byte currency; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signature; // required
  public @org.apache.thrift.annotation.Nullable SmartContractInvocation smartContract; // optional
  public @org.apache.thrift.annotation.Nullable AmountCommission fee; // required
  public long timeCreation; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer userFields; // optional
  /**
   * 
   * @see TransactionType
   */
  public @org.apache.thrift.annotation.Nullable TransactionType type; // required
  public @org.apache.thrift.annotation.Nullable SmartTransInfo smartInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SOURCE((short)2, "source"),
    TARGET((short)3, "target"),
    AMOUNT((short)4, "amount"),
    BALANCE((short)5, "balance"),
    CURRENCY((short)6, "currency"),
    SIGNATURE((short)7, "signature"),
    SMART_CONTRACT((short)8, "smartContract"),
    FEE((short)9, "fee"),
    TIME_CREATION((short)10, "timeCreation"),
    USER_FIELDS((short)11, "userFields"),
    /**
     * 
     * @see TransactionType
     */
    TYPE((short)12, "type"),
    SMART_INFO((short)13, "smartInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SOURCE
          return SOURCE;
        case 3: // TARGET
          return TARGET;
        case 4: // AMOUNT
          return AMOUNT;
        case 5: // BALANCE
          return BALANCE;
        case 6: // CURRENCY
          return CURRENCY;
        case 7: // SIGNATURE
          return SIGNATURE;
        case 8: // SMART_CONTRACT
          return SMART_CONTRACT;
        case 9: // FEE
          return FEE;
        case 10: // TIME_CREATION
          return TIME_CREATION;
        case 11: // USER_FIELDS
          return USER_FIELDS;
        case 12: // TYPE
          return TYPE;
        case 13: // SMART_INFO
          return SMART_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CURRENCY_ISSET_ID = 1;
  private static final int __TIMECREATION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SMART_CONTRACT,_Fields.USER_FIELDS,_Fields.SMART_INFO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TransactionInnerId")));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Address")));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Address")));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.Amount.class)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.credits.general.thrift.generated.Amount.class)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE        , "Currency")));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SMART_CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("smartContract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmartContractInvocation.class)));
    tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AmountCommission.class)));
    tmpMap.put(_Fields.TIME_CREATION, new org.apache.thrift.meta_data.FieldMetaData("timeCreation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Time")));
    tmpMap.put(_Fields.USER_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("userFields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransactionType.class)));
    tmpMap.put(_Fields.SMART_INFO, new org.apache.thrift.meta_data.FieldMetaData("smartInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SmartTransInfo.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
  }

  public Transaction() {
  }

  public Transaction(
    long id,
    java.nio.ByteBuffer source,
    java.nio.ByteBuffer target,
    com.credits.general.thrift.generated.Amount amount,
    com.credits.general.thrift.generated.Amount balance,
    byte currency,
    java.nio.ByteBuffer signature,
    AmountCommission fee,
    long timeCreation,
    TransactionType type)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.source = org.apache.thrift.TBaseHelper.copyBinary(source);
    this.target = org.apache.thrift.TBaseHelper.copyBinary(target);
    this.amount = amount;
    this.balance = balance;
    this.currency = currency;
    setCurrencyIsSet(true);
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
    this.fee = fee;
    this.timeCreation = timeCreation;
    setTimeCreationIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Transaction(Transaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetSource()) {
      this.source = org.apache.thrift.TBaseHelper.copyBinary(other.source);
    }
    if (other.isSetTarget()) {
      this.target = org.apache.thrift.TBaseHelper.copyBinary(other.target);
    }
    if (other.isSetAmount()) {
      this.amount = new com.credits.general.thrift.generated.Amount(other.amount);
    }
    if (other.isSetBalance()) {
      this.balance = new com.credits.general.thrift.generated.Amount(other.balance);
    }
    this.currency = other.currency;
    if (other.isSetSignature()) {
      this.signature = org.apache.thrift.TBaseHelper.copyBinary(other.signature);
    }
    if (other.isSetSmartContract()) {
      this.smartContract = new SmartContractInvocation(other.smartContract);
    }
    if (other.isSetFee()) {
      this.fee = new AmountCommission(other.fee);
    }
    this.timeCreation = other.timeCreation;
    if (other.isSetUserFields()) {
      this.userFields = org.apache.thrift.TBaseHelper.copyBinary(other.userFields);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSmartInfo()) {
      this.smartInfo = new SmartTransInfo(other.smartInfo);
    }
  }

  public Transaction deepCopy() {
    return new Transaction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.source = null;
    this.target = null;
    this.amount = null;
    this.balance = null;
    setCurrencyIsSet(false);
    this.currency = 0;
    this.signature = null;
    this.smartContract = null;
    this.fee = null;
    setTimeCreationIsSet(false);
    this.timeCreation = 0;
    this.userFields = null;
    this.type = null;
    this.smartInfo = null;
  }

  public long getId() {
    return this.id;
  }

  public Transaction setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public byte[] getSource() {
    setSource(org.apache.thrift.TBaseHelper.rightSize(source));
    return source == null ? null : source.array();
  }

  public java.nio.ByteBuffer bufferForSource() {
    return org.apache.thrift.TBaseHelper.copyBinary(source);
  }

  public Transaction setSource(byte[] source) {
    this.source = source == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(source.clone());
    return this;
  }

  public Transaction setSource(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer source) {
    this.source = org.apache.thrift.TBaseHelper.copyBinary(source);
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public byte[] getTarget() {
    setTarget(org.apache.thrift.TBaseHelper.rightSize(target));
    return target == null ? null : target.array();
  }

  public java.nio.ByteBuffer bufferForTarget() {
    return org.apache.thrift.TBaseHelper.copyBinary(target);
  }

  public Transaction setTarget(byte[] target) {
    this.target = target == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(target.clone());
    return this;
  }

  public Transaction setTarget(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer target) {
    this.target = org.apache.thrift.TBaseHelper.copyBinary(target);
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.credits.general.thrift.generated.Amount getAmount() {
    return this.amount;
  }

  public Transaction setAmount(@org.apache.thrift.annotation.Nullable com.credits.general.thrift.generated.Amount amount) {
    this.amount = amount;
    return this;
  }

  public void unsetAmount() {
    this.amount = null;
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return this.amount != null;
  }

  public void setAmountIsSet(boolean value) {
    if (!value) {
      this.amount = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.credits.general.thrift.generated.Amount getBalance() {
    return this.balance;
  }

  public Transaction setBalance(@org.apache.thrift.annotation.Nullable com.credits.general.thrift.generated.Amount balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  public byte getCurrency() {
    return this.currency;
  }

  public Transaction setCurrency(byte currency) {
    this.currency = currency;
    setCurrencyIsSet(true);
    return this;
  }

  public void unsetCurrency() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENCY_ISSET_ID);
  }

  public void setCurrencyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENCY_ISSET_ID, value);
  }

  public byte[] getSignature() {
    setSignature(org.apache.thrift.TBaseHelper.rightSize(signature));
    return signature == null ? null : signature.array();
  }

  public java.nio.ByteBuffer bufferForSignature() {
    return org.apache.thrift.TBaseHelper.copyBinary(signature);
  }

  public Transaction setSignature(byte[] signature) {
    this.signature = signature == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(signature.clone());
    return this;
  }

  public Transaction setSignature(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer signature) {
    this.signature = org.apache.thrift.TBaseHelper.copyBinary(signature);
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SmartContractInvocation getSmartContract() {
    return this.smartContract;
  }

  public Transaction setSmartContract(@org.apache.thrift.annotation.Nullable SmartContractInvocation smartContract) {
    this.smartContract = smartContract;
    return this;
  }

  public void unsetSmartContract() {
    this.smartContract = null;
  }

  /** Returns true if field smartContract is set (has been assigned a value) and false otherwise */
  public boolean isSetSmartContract() {
    return this.smartContract != null;
  }

  public void setSmartContractIsSet(boolean value) {
    if (!value) {
      this.smartContract = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public AmountCommission getFee() {
    return this.fee;
  }

  public Transaction setFee(@org.apache.thrift.annotation.Nullable AmountCommission fee) {
    this.fee = fee;
    return this;
  }

  public void unsetFee() {
    this.fee = null;
  }

  /** Returns true if field fee is set (has been assigned a value) and false otherwise */
  public boolean isSetFee() {
    return this.fee != null;
  }

  public void setFeeIsSet(boolean value) {
    if (!value) {
      this.fee = null;
    }
  }

  public long getTimeCreation() {
    return this.timeCreation;
  }

  public Transaction setTimeCreation(long timeCreation) {
    this.timeCreation = timeCreation;
    setTimeCreationIsSet(true);
    return this;
  }

  public void unsetTimeCreation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMECREATION_ISSET_ID);
  }

  /** Returns true if field timeCreation is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCreation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMECREATION_ISSET_ID);
  }

  public void setTimeCreationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMECREATION_ISSET_ID, value);
  }

  public byte[] getUserFields() {
    setUserFields(org.apache.thrift.TBaseHelper.rightSize(userFields));
    return userFields == null ? null : userFields.array();
  }

  public java.nio.ByteBuffer bufferForUserFields() {
    return org.apache.thrift.TBaseHelper.copyBinary(userFields);
  }

  public Transaction setUserFields(byte[] userFields) {
    this.userFields = userFields == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(userFields.clone());
    return this;
  }

  public Transaction setUserFields(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer userFields) {
    this.userFields = org.apache.thrift.TBaseHelper.copyBinary(userFields);
    return this;
  }

  public void unsetUserFields() {
    this.userFields = null;
  }

  /** Returns true if field userFields is set (has been assigned a value) and false otherwise */
  public boolean isSetUserFields() {
    return this.userFields != null;
  }

  public void setUserFieldsIsSet(boolean value) {
    if (!value) {
      this.userFields = null;
    }
  }

  /**
   * 
   * @see TransactionType
   */
  @org.apache.thrift.annotation.Nullable
  public TransactionType getType() {
    return this.type;
  }

  /**
   * 
   * @see TransactionType
   */
  public Transaction setType(@org.apache.thrift.annotation.Nullable TransactionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SmartTransInfo getSmartInfo() {
    return this.smartInfo;
  }

  public Transaction setSmartInfo(@org.apache.thrift.annotation.Nullable SmartTransInfo smartInfo) {
    this.smartInfo = smartInfo;
    return this;
  }

  public void unsetSmartInfo() {
    this.smartInfo = null;
  }

  /** Returns true if field smartInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSmartInfo() {
    return this.smartInfo != null;
  }

  public void setSmartInfoIsSet(boolean value) {
    if (!value) {
      this.smartInfo = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        if (value instanceof byte[]) {
          setSource((byte[])value);
        } else {
          setSource((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        if (value instanceof byte[]) {
          setTarget((byte[])value);
        } else {
          setTarget((java.nio.ByteBuffer)value);
        }
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((com.credits.general.thrift.generated.Amount)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((com.credits.general.thrift.generated.Amount)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.Byte)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        if (value instanceof byte[]) {
          setSignature((byte[])value);
        } else {
          setSignature((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SMART_CONTRACT:
      if (value == null) {
        unsetSmartContract();
      } else {
        setSmartContract((SmartContractInvocation)value);
      }
      break;

    case FEE:
      if (value == null) {
        unsetFee();
      } else {
        setFee((AmountCommission)value);
      }
      break;

    case TIME_CREATION:
      if (value == null) {
        unsetTimeCreation();
      } else {
        setTimeCreation((java.lang.Long)value);
      }
      break;

    case USER_FIELDS:
      if (value == null) {
        unsetUserFields();
      } else {
        if (value instanceof byte[]) {
          setUserFields((byte[])value);
        } else {
          setUserFields((java.nio.ByteBuffer)value);
        }
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TransactionType)value);
      }
      break;

    case SMART_INFO:
      if (value == null) {
        unsetSmartInfo();
      } else {
        setSmartInfo((SmartTransInfo)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SOURCE:
      return getSource();

    case TARGET:
      return getTarget();

    case AMOUNT:
      return getAmount();

    case BALANCE:
      return getBalance();

    case CURRENCY:
      return getCurrency();

    case SIGNATURE:
      return getSignature();

    case SMART_CONTRACT:
      return getSmartContract();

    case FEE:
      return getFee();

    case TIME_CREATION:
      return getTimeCreation();

    case USER_FIELDS:
      return getUserFields();

    case TYPE:
      return getType();

    case SMART_INFO:
      return getSmartInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SOURCE:
      return isSetSource();
    case TARGET:
      return isSetTarget();
    case AMOUNT:
      return isSetAmount();
    case BALANCE:
      return isSetBalance();
    case CURRENCY:
      return isSetCurrency();
    case SIGNATURE:
      return isSetSignature();
    case SMART_CONTRACT:
      return isSetSmartContract();
    case FEE:
      return isSetFee();
    case TIME_CREATION:
      return isSetTimeCreation();
    case USER_FIELDS:
      return isSetUserFields();
    case TYPE:
      return isSetType();
    case SMART_INFO:
      return isSetSmartInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Transaction)
      return this.equals((Transaction)that);
    return false;
  }

  public boolean equals(Transaction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_amount = true && this.isSetAmount();
    boolean that_present_amount = true && that.isSetAmount();
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (!this.amount.equals(that.amount))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    boolean this_present_currency = true;
    boolean that_present_currency = true;
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (this.currency != that.currency)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_smartContract = true && this.isSetSmartContract();
    boolean that_present_smartContract = true && that.isSetSmartContract();
    if (this_present_smartContract || that_present_smartContract) {
      if (!(this_present_smartContract && that_present_smartContract))
        return false;
      if (!this.smartContract.equals(that.smartContract))
        return false;
    }

    boolean this_present_fee = true && this.isSetFee();
    boolean that_present_fee = true && that.isSetFee();
    if (this_present_fee || that_present_fee) {
      if (!(this_present_fee && that_present_fee))
        return false;
      if (!this.fee.equals(that.fee))
        return false;
    }

    boolean this_present_timeCreation = true;
    boolean that_present_timeCreation = true;
    if (this_present_timeCreation || that_present_timeCreation) {
      if (!(this_present_timeCreation && that_present_timeCreation))
        return false;
      if (this.timeCreation != that.timeCreation)
        return false;
    }

    boolean this_present_userFields = true && this.isSetUserFields();
    boolean that_present_userFields = true && that.isSetUserFields();
    if (this_present_userFields || that_present_userFields) {
      if (!(this_present_userFields && that_present_userFields))
        return false;
      if (!this.userFields.equals(that.userFields))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_smartInfo = true && this.isSetSmartInfo();
    boolean that_present_smartInfo = true && that.isSetSmartInfo();
    if (this_present_smartInfo || that_present_smartInfo) {
      if (!(this_present_smartInfo && that_present_smartInfo))
        return false;
      if (!this.smartInfo.equals(that.smartInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + target.hashCode();

    hashCode = hashCode * 8191 + ((isSetAmount()) ? 131071 : 524287);
    if (isSetAmount())
      hashCode = hashCode * 8191 + amount.hashCode();

    hashCode = hashCode * 8191 + ((isSetBalance()) ? 131071 : 524287);
    if (isSetBalance())
      hashCode = hashCode * 8191 + balance.hashCode();

    hashCode = hashCode * 8191 + (int) (currency);

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetSmartContract()) ? 131071 : 524287);
    if (isSetSmartContract())
      hashCode = hashCode * 8191 + smartContract.hashCode();

    hashCode = hashCode * 8191 + ((isSetFee()) ? 131071 : 524287);
    if (isSetFee())
      hashCode = hashCode * 8191 + fee.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeCreation);

    hashCode = hashCode * 8191 + ((isSetUserFields()) ? 131071 : 524287);
    if (isSetUserFields())
      hashCode = hashCode * 8191 + userFields.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetSmartInfo()) ? 131071 : 524287);
    if (isSetSmartInfo())
      hashCode = hashCode * 8191 + smartInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Transaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmartContract()).compareTo(other.isSetSmartContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmartContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smartContract, other.smartContract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeCreation()).compareTo(other.isSetTimeCreation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCreation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCreation, other.timeCreation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserFields()).compareTo(other.isSetUserFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userFields, other.userFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSmartInfo()).compareTo(other.isSetSmartInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmartInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smartInfo, other.smartInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Transaction(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.source, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.target, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    if (this.amount == null) {
      sb.append("null");
    } else {
      sb.append(this.amount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    if (this.balance == null) {
      sb.append("null");
    } else {
      sb.append(this.balance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    sb.append(this.currency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.signature, sb);
    }
    first = false;
    if (isSetSmartContract()) {
      if (!first) sb.append(", ");
      sb.append("smartContract:");
      if (this.smartContract == null) {
        sb.append("null");
      } else {
        sb.append(this.smartContract);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fee:");
    if (this.fee == null) {
      sb.append("null");
    } else {
      sb.append(this.fee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeCreation:");
    sb.append(this.timeCreation);
    first = false;
    if (isSetUserFields()) {
      if (!first) sb.append(", ");
      sb.append("userFields:");
      if (this.userFields == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.userFields, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetSmartInfo()) {
      if (!first) sb.append(", ");
      sb.append("smartInfo:");
      if (this.smartInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.smartInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (amount != null) {
      amount.validate();
    }
    if (balance != null) {
      balance.validate();
    }
    if (smartContract != null) {
      smartContract.validate();
    }
    if (fee != null) {
      fee.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransactionStandardScheme getScheme() {
      return new TransactionStandardScheme();
    }
  }

  private static class TransactionStandardScheme extends org.apache.thrift.scheme.StandardScheme<Transaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Transaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readBinary();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.target = iprot.readBinary();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.amount = new com.credits.general.thrift.generated.Amount();
              struct.amount.read(iprot);
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.balance = new com.credits.general.thrift.generated.Amount();
              struct.balance.read(iprot);
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.currency = iprot.readByte();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readBinary();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SMART_CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.smartContract = new SmartContractInvocation();
              struct.smartContract.read(iprot);
              struct.setSmartContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fee = new AmountCommission();
              struct.fee.read(iprot);
              struct.setFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_CREATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeCreation = iprot.readI64();
              struct.setTimeCreationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userFields = iprot.readBinary();
              struct.setUserFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.credits.client.node.thrift.generated.TransactionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SMART_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.smartInfo = new SmartTransInfo();
              struct.smartInfo.read(iprot);
              struct.setSmartInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Transaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeBinary(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeBinary(struct.target);
        oprot.writeFieldEnd();
      }
      if (struct.amount != null) {
        oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
        struct.amount.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.balance != null) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        struct.balance.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeByte(struct.currency);
      oprot.writeFieldEnd();
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeBinary(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.smartContract != null) {
        if (struct.isSetSmartContract()) {
          oprot.writeFieldBegin(SMART_CONTRACT_FIELD_DESC);
          struct.smartContract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fee != null) {
        oprot.writeFieldBegin(FEE_FIELD_DESC);
        struct.fee.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_CREATION_FIELD_DESC);
      oprot.writeI64(struct.timeCreation);
      oprot.writeFieldEnd();
      if (struct.userFields != null) {
        if (struct.isSetUserFields()) {
          oprot.writeFieldBegin(USER_FIELDS_FIELD_DESC);
          oprot.writeBinary(struct.userFields);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.smartInfo != null) {
        if (struct.isSetSmartInfo()) {
          oprot.writeFieldBegin(SMART_INFO_FIELD_DESC);
          struct.smartInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransactionTupleScheme getScheme() {
      return new TransactionTupleScheme();
    }
  }

  private static class TransactionTupleScheme extends org.apache.thrift.scheme.TupleScheme<Transaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSource()) {
        optionals.set(1);
      }
      if (struct.isSetTarget()) {
        optionals.set(2);
      }
      if (struct.isSetAmount()) {
        optionals.set(3);
      }
      if (struct.isSetBalance()) {
        optionals.set(4);
      }
      if (struct.isSetCurrency()) {
        optionals.set(5);
      }
      if (struct.isSetSignature()) {
        optionals.set(6);
      }
      if (struct.isSetSmartContract()) {
        optionals.set(7);
      }
      if (struct.isSetFee()) {
        optionals.set(8);
      }
      if (struct.isSetTimeCreation()) {
        optionals.set(9);
      }
      if (struct.isSetUserFields()) {
        optionals.set(10);
      }
      if (struct.isSetType()) {
        optionals.set(11);
      }
      if (struct.isSetSmartInfo()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetSource()) {
        oprot.writeBinary(struct.source);
      }
      if (struct.isSetTarget()) {
        oprot.writeBinary(struct.target);
      }
      if (struct.isSetAmount()) {
        struct.amount.write(oprot);
      }
      if (struct.isSetBalance()) {
        struct.balance.write(oprot);
      }
      if (struct.isSetCurrency()) {
        oprot.writeByte(struct.currency);
      }
      if (struct.isSetSignature()) {
        oprot.writeBinary(struct.signature);
      }
      if (struct.isSetSmartContract()) {
        struct.smartContract.write(oprot);
      }
      if (struct.isSetFee()) {
        struct.fee.write(oprot);
      }
      if (struct.isSetTimeCreation()) {
        oprot.writeI64(struct.timeCreation);
      }
      if (struct.isSetUserFields()) {
        oprot.writeBinary(struct.userFields);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetSmartInfo()) {
        struct.smartInfo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.source = iprot.readBinary();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target = iprot.readBinary();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.amount = new com.credits.general.thrift.generated.Amount();
        struct.amount.read(iprot);
        struct.setAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.balance = new com.credits.general.thrift.generated.Amount();
        struct.balance.read(iprot);
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.currency = iprot.readByte();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.signature = iprot.readBinary();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(7)) {
        struct.smartContract = new SmartContractInvocation();
        struct.smartContract.read(iprot);
        struct.setSmartContractIsSet(true);
      }
      if (incoming.get(8)) {
        struct.fee = new AmountCommission();
        struct.fee.read(iprot);
        struct.setFeeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timeCreation = iprot.readI64();
        struct.setTimeCreationIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userFields = iprot.readBinary();
        struct.setUserFieldsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.type = com.credits.client.node.thrift.generated.TransactionType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.smartInfo = new SmartTransInfo();
        struct.smartInfo.read(iprot);
        struct.setSmartInfoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

